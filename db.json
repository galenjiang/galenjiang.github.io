{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/386/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/386/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/386/source/css/bootstrap-responsive.css","path":"css/bootstrap-responsive.css","modified":0,"renderable":1},{"_id":"themes/386/source/css/font-awesome.css","path":"css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/386/source/css/google-fonts.css","path":"css/google-fonts.css","modified":0,"renderable":1},{"_id":"themes/386/source/css/highlight.css","path":"css/highlight.css","modified":0,"renderable":1},{"_id":"themes/386/source/css/responsive.css","path":"css/responsive.css","modified":0,"renderable":1},{"_id":"themes/386/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/386/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/386/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/386/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/386/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/386/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/386/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/386/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/386/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/386/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/386/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/386/source/img/github-sprite.png","path":"img/github-sprite.png","modified":0,"renderable":1},{"_id":"themes/386/source/img/glyphicons-halflings-white.png","path":"img/glyphicons-halflings-white.png","modified":0,"renderable":1},{"_id":"themes/386/source/img/glyphicons-halflings.png","path":"img/glyphicons-halflings.png","modified":0,"renderable":1},{"_id":"themes/386/source/img/grid-18px-masked.png","path":"img/grid-18px-masked.png","modified":0,"renderable":1},{"_id":"themes/386/source/img/grid-baseline-20px.png","path":"img/grid-baseline-20px.png","modified":0,"renderable":1},{"_id":"themes/386/source/js/gallery.js","path":"js/gallery.js","modified":0,"renderable":1},{"_id":"themes/386/source/js/jquery.imagesloaded.min.js","path":"js/jquery.imagesloaded.min.js","modified":0,"renderable":1},{"_id":"themes/386/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":0,"renderable":1},{"_id":"themes/386/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/386/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/386/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":0,"renderable":1},{"_id":"themes/386/source/fonts/FontAwesome.otf","path":"fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/386/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/386/source/js/jquery-2.0.3.min.js","path":"js/jquery-2.0.3.min.js","modified":0,"renderable":1},{"_id":"themes/386/source/css/fonts/Fixedsys500c.eot","path":"css/fonts/Fixedsys500c.eot","modified":0,"renderable":1},{"_id":"themes/386/source/css/fonts/Fixedsys500c.otf","path":"css/fonts/Fixedsys500c.otf","modified":0,"renderable":1},{"_id":"themes/386/source/css/fonts/Fixedsys500c.ttf","path":"css/fonts/Fixedsys500c.ttf","modified":0,"renderable":1},{"_id":"themes/386/source/css/fonts/Fixedsys500c.woff","path":"css/fonts/Fixedsys500c.woff","modified":0,"renderable":1},{"_id":"themes/386/source/fonts/google-fonts/0XxGQsSc1g4rdRdjJKZrNBsxEYwM7FgeyaSgU71cLG0.woff","path":"fonts/google-fonts/0XxGQsSc1g4rdRdjJKZrNBsxEYwM7FgeyaSgU71cLG0.woff","modified":0,"renderable":1},{"_id":"themes/386/source/fonts/google-fonts/0AKsP294HTD-nvJgucYTaIbN6UDyHWBl620a-IRfuBk.woff","path":"fonts/google-fonts/0AKsP294HTD-nvJgucYTaIbN6UDyHWBl620a-IRfuBk.woff","modified":0,"renderable":1},{"_id":"themes/386/source/fonts/google-fonts/2UX7WLTfW3W8TclTUvlFyQ.woff","path":"fonts/google-fonts/2UX7WLTfW3W8TclTUvlFyQ.woff","modified":0,"renderable":1},{"_id":"themes/386/source/fonts/google-fonts/PIPMHY90P7jtyjpXuZ2cLD8E0i7KZn-EPnyo3HZu7kw.woff","path":"fonts/google-fonts/PIPMHY90P7jtyjpXuZ2cLD8E0i7KZn-EPnyo3HZu7kw.woff","modified":0,"renderable":1},{"_id":"themes/386/source/fonts/google-fonts/UyYrYy3ltEffJV9QueSi4RdbPw3QSf9R-kE0EsQUn2A.woff","path":"fonts/google-fonts/UyYrYy3ltEffJV9QueSi4RdbPw3QSf9R-kE0EsQUn2A.woff","modified":0,"renderable":1},{"_id":"themes/386/source/fonts/google-fonts/cj2hUnSRBhwmSPr9kS5899kZXW4sYc4BjuAIFc1SXII.woff","path":"fonts/google-fonts/cj2hUnSRBhwmSPr9kS5899kZXW4sYc4BjuAIFc1SXII.woff","modified":0,"renderable":1},{"_id":"themes/386/source/fonts/google-fonts/lILlYDvubYemzYzN7GbLkHhCUOGz7vYGh680lGh-uXM.woff","path":"fonts/google-fonts/lILlYDvubYemzYzN7GbLkHhCUOGz7vYGh680lGh-uXM.woff","modified":0,"renderable":1},{"_id":"themes/386/source/fonts/google-fonts/LKf8nhXsWg5ybwEGXk8UBQ.woff","path":"fonts/google-fonts/LKf8nhXsWg5ybwEGXk8UBQ.woff","modified":0,"renderable":1},{"_id":"themes/386/source/css/bootstrap.css.map","path":"css/bootstrap.css.map","modified":0,"renderable":1},{"_id":"themes/386/source/css/fonts/Fixedsys500c.svg","path":"css/fonts/Fixedsys500c.svg","modified":0,"renderable":1},{"_id":"themes/386/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/386/.gitignore","hash":"a2c6038ae0f7962dbf23206c463c716e426101b1","modified":1464930528884},{"_id":"themes/386/LICENSE","hash":"f26ce5333bd73ee6f0f9bb2c97fcf5707c1c7715","modified":1464930528884},{"_id":"themes/386/README.md","hash":"29b2025e8a01ad58da199544dd4929d983229708","modified":1464930528885},{"_id":"themes/386/_config.yml","hash":"28c795b8ce76f36eb4bd7fd90374298a228e948c","modified":1464930528885},{"_id":"source/_posts/babel-getting-start.md","hash":"caf9e3d0f3a482c18abaf0504f99f4c576ea0a64","modified":1463137893366},{"_id":"source/_posts/es6-module.md","hash":"65ab467c54151b925d8f62d815f92a26fb0882bf","modified":1463137893367},{"_id":"source/_posts/first-blog.md","hash":"fa81fe71b6b9ca592c666f6ab1a199bec56e192a","modified":1463137893367},{"_id":"source/_posts/function-how-far.md","hash":"fbb6d443971ccf2fbd0d823290ce482c3a52509d","modified":1463137893367},{"_id":"source/_posts/git-getting-start.md","hash":"be9cc285f910e6343c186cae3043a2a4ab2f9301","modified":1463137893376},{"_id":"source/_posts/how-to-prevent-repeating-send-ajax.md","hash":"1988cb8bd4c17e43e727fb9fa32790a12e516622","modified":1463137893396},{"_id":"source/_posts/how-to-restudy-programming.md","hash":"78b478a2b48bde888387040aea42c708e3f11e25","modified":1463137893397},{"_id":"source/_posts/line-height-vertical.md","hash":"ec652651a8150259b0cfc467bfff88ee4ab92252","modified":1463466011702},{"_id":"source/_posts/react-getting-start.md","hash":"f8157e613772ae93adf9782dc8630daaedfc6a32","modified":1463137893397},{"_id":"source/_posts/this.md","hash":"4d61de4b0ac082db7ecea7bc9d1ff35ca93742aa","modified":1464931479322},{"_id":"source/_posts/vertical-format.md","hash":"02189dbd8358ab33d69dbcbbbb905ac6575901de","modified":1463129334925},{"_id":"source/about/index.md","hash":"0b71ad205d4a5e7dc981ebfe59217c6cf0ec957d","modified":1464930528882},{"_id":"source/categories/index.md","hash":"b6bd472680c8defc06de66be4b48fd5dffda83aa","modified":1464930528883},{"_id":"source/tags/index.md","hash":"2aa7bfe7429003eb9671e84f4cbb48c2b996ef05","modified":1464930528883},{"_id":"themes/386/languages/default.yml","hash":"175fa1bd6f3744f81326b8e7c9a3dfad07199270","modified":1464930528886},{"_id":"themes/386/languages/zh-CN.yml","hash":"37b0b97471e646caf67404b447474b6da9fae564","modified":1464930528886},{"_id":"themes/386/languages/zh-TW.yml","hash":"633a09b238cfadcf3c6f3dbec58cf60822d23a44","modified":1464930528886},{"_id":"themes/386/layout/archive.ejs","hash":"c97be36b33bb44957778587f00c978f2d28016f8","modified":1464930528896},{"_id":"themes/386/layout/categories.ejs","hash":"75931cf16ce89871f53d09e918109bcb0c7741a1","modified":1464930528896},{"_id":"themes/386/layout/index.ejs","hash":"27993280992ed3f03a01739c5290f242eab66759","modified":1464930528896},{"_id":"themes/386/layout/layout.ejs","hash":"cd333c7859008552037659012011990a9b32d2c4","modified":1464930528897},{"_id":"themes/386/layout/page.ejs","hash":"21612a42b29cb20f106bc2716c598e69db142750","modified":1464930528898},{"_id":"themes/386/layout/post.ejs","hash":"477c1ab02a72dd19fc6f9dd234116baa7432b9fd","modified":1464930528898},{"_id":"themes/386/layout/tags.ejs","hash":"4a39d2fe5cd2b005b9a18b30a11566d631a977fe","modified":1464930528898},{"_id":"themes/386/source/favicon.ico","hash":"bbfe456d427483c27cda0bd10fec5cc1f848c1f1","modified":1464930528911},{"_id":"themes/386/source/favicon.png","hash":"3247c02b3e3516aca534bcfa7a7c34b30defa298","modified":1464930528911},{"_id":"themes/386/layout/_partial/after_footer.ejs","hash":"59b4ade0400f04b19bc73a1ae7e66ea5cdef48fc","modified":1464930528887},{"_id":"themes/386/layout/_partial/archive.ejs","hash":"6eeb24ae52e46343ba6e9fd7cfa56ee79589f421","modified":1464930528887},{"_id":"themes/386/layout/_partial/article.ejs","hash":"b24f8e6141ae9e97fdafd927ed48812225123feb","modified":1464930528888},{"_id":"themes/386/layout/_partial/footer.ejs","hash":"3363d5b44df0d199cb4db333d71d485064bb4c51","modified":1464930528888},{"_id":"themes/386/layout/_partial/index.ejs","hash":"0bd770f5281919857f9bd913f61851e5555201d3","modified":1464930528889},{"_id":"themes/386/layout/_partial/head.ejs","hash":"beda2b93b5c7e2697d4ad76c255857836621cf9f","modified":1464930528888},{"_id":"themes/386/layout/_partial/index_pagination.ejs","hash":"64741f67cbcd03a3a203fa9c080e7239710eddd9","modified":1464930528889},{"_id":"themes/386/layout/_partial/navigation.ejs","hash":"e4d9af8d4cae60541a8e8f0f8caeeb28aaf5ca33","modified":1464930528889},{"_id":"themes/386/layout/_partial/search.ejs","hash":"f00bcd7cdef50a727600960de1d8b6a9e9b360b4","modified":1464930528894},{"_id":"themes/386/layout/_partial/sidebar.ejs","hash":"0574610968679984f6aec4b31fbba655df972d28","modified":1464930528894},{"_id":"themes/386/layout/_widget/category.ejs","hash":"7452e116d550f8a5c5beff8cac3ac56645f035ae","modified":1464930528894},{"_id":"themes/386/layout/_widget/links.ejs","hash":"209f60bec33c1179dff9bd09c66dc2c036246b40","modified":1464930528895},{"_id":"themes/386/layout/_widget/search.ejs","hash":"cc322c98ca8420d1b5a31a7337249b403c661b80","modified":1464930528895},{"_id":"themes/386/layout/_widget/recent_posts.ejs","hash":"a9333350df895e2bc85c60c17c47a6a1dfa846e7","modified":1464930528895},{"_id":"themes/386/layout/_widget/tagcloud.ejs","hash":"4d592eb23466383f3224e36474b2e4dfe85e4d42","modified":1464930528896},{"_id":"themes/386/source/css/.emacs.desktop","hash":"f6c93c6c3dde00e320c4f41f40a1b16b63906df1","modified":1464930528899},{"_id":"themes/386/source/css/bootstrap-responsive.css","hash":"b668e794bc3f24fd718d24304605000c5a8be0f9","modified":1464930528899},{"_id":"themes/386/source/css/font-awesome.css","hash":"5eca1a5aef2ef4fb845f7e5a96c27f74a5bd1763","modified":1464930528902},{"_id":"themes/386/source/css/google-fonts.css","hash":"06db66e315b47f844fb208b50e5710606360b142","modified":1464930528906},{"_id":"themes/386/source/css/highlight.css","hash":"97dee196bb0cc2cf9b1de0878d2808f3bf883250","modified":1464930528907},{"_id":"themes/386/source/css/responsive.css","hash":"30f6a26aa0a5368d24a68575eb3fe254de7b92d2","modified":1464930528907},{"_id":"themes/386/source/css/style.css","hash":"63846eb7fa6664b361ce1411efc6d46921c47dd5","modified":1464930528907},{"_id":"themes/386/source/fancybox/blank.gif","hash":"4ffebfc1255c0da73aab342450a9ee09fcaccb86","modified":1464930528908},{"_id":"themes/386/source/fancybox/fancybox_loading@2x.gif","hash":"381e91e67e85bfda09ce8b88205d93d9a7d20d4d","modified":1464930528908},{"_id":"themes/386/source/fancybox/fancybox_loading.gif","hash":"4fbaf63664f65a42bef60289c887cd61a925ce4c","modified":1464930528908},{"_id":"themes/386/source/fancybox/fancybox_overlay.png","hash":"beb714da455e5dbdbf7b2ed466ff4308c103addb","modified":1464930528909},{"_id":"themes/386/source/fancybox/fancybox_sprite.png","hash":"0657b6b574bafc4c819c7d6c3bc5dd7205c8eee7","modified":1464930528909},{"_id":"themes/386/source/fancybox/fancybox_sprite@2x.png","hash":"ecf1523aefe416a4cc901ab4cda5d488e3d9cd76","modified":1464930528910},{"_id":"themes/386/source/fancybox/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1464930528911},{"_id":"themes/386/source/fancybox/jquery.fancybox.css","hash":"cbb69ef9748bf92edc3eb4b269b77ad25465d049","modified":1464930528910},{"_id":"themes/386/source/fonts/fontawesome-webfont.eot","hash":"0183979056f0b87616cd99d5c54a48f3b771eee6","modified":1464930528913},{"_id":"themes/386/source/fonts/fontawesome-webfont.woff","hash":"7d65e0227d0d7cdc1718119cd2a7dce0638f151c","modified":1464930528916},{"_id":"themes/386/source/img/github-sprite.png","hash":"7e3ba97164323840fbe3a175b8535087ece93711","modified":1464930528922},{"_id":"themes/386/source/img/glyphicons-halflings-white.png","hash":"3f6acfb147851b261f24b030a840b758c4667e26","modified":1464930528922},{"_id":"themes/386/source/img/glyphicons-halflings.png","hash":"0b92d4a64699af327eff00b727f1aa46361debfa","modified":1464930528923},{"_id":"themes/386/source/img/grid-18px-masked.png","hash":"2a5b89bc935f2a53870f8788b573971dc3ac7358","modified":1464930528924},{"_id":"themes/386/source/img/grid-baseline-20px.png","hash":"f51efa3d9ee45c6053bb76244fdf7dd8967b7b6b","modified":1464930528924},{"_id":"themes/386/source/js/gallery.js","hash":"10cad81731825178f3d30b80a2694a377c1fb7a6","modified":1464930528925},{"_id":"themes/386/source/js/jquery.imagesloaded.min.js","hash":"3eb6381d2ed4b706020e4be5aff024aab4bcabc5","modified":1464930528927},{"_id":"themes/386/source/js/bootstrap.min.js","hash":"9933cdc70c0047a3ea1a196f9320c36737b93c2a","modified":1464930528925},{"_id":"themes/386/source/js/main.js","hash":"e3fcd795564533a3984b0ce327bd8dff44145f89","modified":1464930528927},{"_id":"themes/386/source/js/search.js","hash":"a882244488031de498176fc6af35cea2a13c7a18","modified":1464930528927},{"_id":"themes/386/source/css/bootstrap.min.css","hash":"468c662a80ef582fa1ae492ebe5d415c9b275818","modified":1464930528902},{"_id":"themes/386/source/fonts/FontAwesome.otf","hash":"6270a4a561a69fef5f5cc18cdf9efc256ec2ccbe","modified":1464930528913},{"_id":"themes/386/source/fonts/fontawesome-webfont.ttf","hash":"6225ccc4ec94d060f19efab97ca42d842845b949","modified":1464930528916},{"_id":"themes/386/source/js/jquery-2.0.3.min.js","hash":"3dad20239301f9ee22f22ca7d5ac6eca1da4ac22","modified":1464930528926},{"_id":"themes/386/layout/_partial/post/analytics.ejs","hash":"5edcbdd411b9d95ef11844ccf1454fdf978cee01","modified":1464930528890},{"_id":"themes/386/layout/_partial/post/category.ejs","hash":"cc5b4cc95af6d5df4f7d1f1301dad8d4a5c7f8d0","modified":1464930528890},{"_id":"themes/386/layout/_partial/post/comment.ejs","hash":"94c2df9d0017e325b5ad052f76355a218328fc62","modified":1464930528890},{"_id":"themes/386/layout/_partial/post/comment_footer.ejs","hash":"b3a6db566afdf0931909013926b7008eac9129ee","modified":1464930528891},{"_id":"themes/386/layout/_partial/post/entry.ejs","hash":"c7a40f6fa8297daeb7f4c7ec35985c412094bc7b","modified":1464930528891},{"_id":"themes/386/layout/_partial/post/meta.ejs","hash":"432e08b2563241dec4e4ef67717173d22e052dcf","modified":1464930528892},{"_id":"themes/386/layout/_partial/post/pagination.ejs","hash":"ea48347c56412921da646bfe5c293bfd275c8a9d","modified":1464930528892},{"_id":"themes/386/layout/_partial/post/share.ejs","hash":"991cf130c37f08c7e948772fb45587592b165b55","modified":1464930528892},{"_id":"themes/386/layout/_partial/post/slogan.ejs","hash":"97ac6406d2996addcf2dae44fdd0ba8796a42a88","modified":1464930528892},{"_id":"themes/386/layout/_partial/post/tag.ejs","hash":"ae292045468812e678780288e51b1b19fa7e3e0c","modified":1464930528893},{"_id":"themes/386/layout/_partial/post/title.ejs","hash":"ce8eb57990e7dac5e472832235ec719863b35201","modified":1464930528893},{"_id":"themes/386/source/css/fonts/Fixedsys500c.eot","hash":"49611cf2e4d7e5c489c191f994ba7ac315bcce5c","modified":1464930528903},{"_id":"themes/386/source/css/fonts/Fixedsys500c.otf","hash":"e1fede43e072a990b9cd9899cdd26b78b30d305d","modified":1464930528904},{"_id":"themes/386/source/css/fonts/Fixedsys500c.ttf","hash":"19a8e49df8611dd0d90133a2eb0e410c23932db4","modified":1464930528906},{"_id":"themes/386/source/css/fonts/Fixedsys500c.woff","hash":"21f8e34c5e252a54710c5f6b0e363b9c43f979b2","modified":1464930528906},{"_id":"themes/386/source/fonts/google-fonts/0XxGQsSc1g4rdRdjJKZrNBsxEYwM7FgeyaSgU71cLG0.woff","hash":"33225e85c33279e7b4f0c5c65ff93bec740dd59c","modified":1464930528918},{"_id":"themes/386/source/fonts/google-fonts/0AKsP294HTD-nvJgucYTaIbN6UDyHWBl620a-IRfuBk.woff","hash":"1d9bb14c006d39d7eb0812a85567c7431f899b8d","modified":1464930528917},{"_id":"themes/386/source/fonts/google-fonts/2UX7WLTfW3W8TclTUvlFyQ.woff","hash":"87deb174af2e2beebb9f09d618a5159ca299a3d0","modified":1464930528918},{"_id":"themes/386/source/fonts/google-fonts/PIPMHY90P7jtyjpXuZ2cLD8E0i7KZn-EPnyo3HZu7kw.woff","hash":"18dc51e642b4df958098d3bbc6d3ba0237ef6150","modified":1464930528920},{"_id":"themes/386/source/fonts/google-fonts/UyYrYy3ltEffJV9QueSi4RdbPw3QSf9R-kE0EsQUn2A.woff","hash":"d9f913d09bb3c25749daf8e7ab829c850a842929","modified":1464930528920},{"_id":"themes/386/source/fonts/google-fonts/cj2hUnSRBhwmSPr9kS5899kZXW4sYc4BjuAIFc1SXII.woff","hash":"17a484b92c0dacc8e8b4f0d38ccc1db400819d1d","modified":1464930528921},{"_id":"themes/386/source/fonts/google-fonts/lILlYDvubYemzYzN7GbLkHhCUOGz7vYGh680lGh-uXM.woff","hash":"e6c9f1e5a6a966a8f7250201356f351890a48921","modified":1464930528921},{"_id":"themes/386/source/fonts/google-fonts/LKf8nhXsWg5ybwEGXk8UBQ.woff","hash":"f401d51152681048c06187c5d3919b1407b899c5","modified":1464930528919},{"_id":"themes/386/source/css/bootstrap.css.map","hash":"6925683e03d7cae9dc542bfcca38eccf6f66169c","modified":1464930528901},{"_id":"themes/386/source/css/fonts/Fixedsys500c.svg","hash":"584b95873e60ea5d4212dc42cb37f4643d3a1915","modified":1464930528905},{"_id":"themes/386/source/fonts/fontawesome-webfont.svg","hash":"e471023286b7dd1d2ccc72f670a471cfdfeafab7","modified":1464930528915},{"_id":"public/about/index.html","hash":"85ad5dbaf6fc871e3dc91b388b9c27c20714df60","modified":1464931491705},{"_id":"public/categories/index.html","hash":"548a1b04ab95f7ded4d9e04f4e2a96c0e204e73f","modified":1464931491705},{"_id":"public/tags/index.html","hash":"3bc02d1cb9aab3b910d9b67fad4397cef8b5eaa6","modified":1464931491706},{"_id":"public/2016/05/13/vertical-format/index.html","hash":"d2e19be68fc50d34a4a009c74639c26a6ee82e04","modified":1464931491706},{"_id":"public/2016/05/11/babel-getting-start/index.html","hash":"4dcb841c59e09d95355275c92892cd4159ef7f0f","modified":1464931491706},{"_id":"public/2016/05/11/es6-module/index.html","hash":"ba4c18982ea4549f35a3b4d23285df355a59067b","modified":1464931491706},{"_id":"public/2016/05/11/git-getting-start/index.html","hash":"147d5aeccfd83cdd2b9922e1f9cbb21a716900da","modified":1464931491706},{"_id":"public/2016/05/11/line-height-vertical/index.html","hash":"348646c97230c93872e91c4397a8c1057484fc0a","modified":1464931491706},{"_id":"public/2016/05/11/react-getting-start/index.html","hash":"2261c4552e4ba79d3a9a2e7da8d7e9d16c08a7a0","modified":1464931491706},{"_id":"public/2016/05/11/how-to-restudy-programming/index.html","hash":"4d31dc2b3404d4931ed3f0245c8959c0647084c7","modified":1464931491706},{"_id":"public/2016/05/10/first-blog/index.html","hash":"ff9f7159724582ed970f7c4627505bb662872a57","modified":1464931491706},{"_id":"public/archives/index.html","hash":"f956beb6db04835511d92803d367fea24487cad0","modified":1464931491706},{"_id":"public/archives/page/2/index.html","hash":"420056787bd74749712726f8b52cb4cf2579e15c","modified":1464931491706},{"_id":"public/archives/2016/index.html","hash":"eda70fc4bb6c613355d9b06fde5c6519b368e436","modified":1464931491707},{"_id":"public/archives/2016/page/2/index.html","hash":"81dd76133b293e9ea07e1b8d75d7baeeb8082830","modified":1464931491707},{"_id":"public/archives/2016/05/index.html","hash":"ca793595ac2b73b0f851c6af52a94a1f71de350a","modified":1464931491707},{"_id":"public/archives/2016/06/index.html","hash":"b55f7a02e7a15df9bb2ecc649e78bcc0eb9f7f6a","modified":1464931491707},{"_id":"public/page/2/index.html","hash":"376adbd057be048e33a93e680090b78c85e9119a","modified":1464931491707},{"_id":"public/tags/javascript/index.html","hash":"f7f0cbe219dd7e2813a2d42ae40e9c8c7adb76e8","modified":1464931491707},{"_id":"public/tags/es6/index.html","hash":"2f683cff96959f7a9e9a4fb0b8726141e486c264","modified":1464931491707},{"_id":"public/tags/others/index.html","hash":"d4bc88c3ec1f8822bb169563c7535f4964238d30","modified":1464931491707},{"_id":"public/tags/git/index.html","hash":"4b5635d80e2467e2d4cbdd15055240d93488df70","modified":1464931491707},{"_id":"public/tags/css/index.html","hash":"84161c7e67045025ffa942c28040fc8df6050e8a","modified":1464931491707},{"_id":"public/tags/react/index.html","hash":"42082ad61b17b22a381315e7d88a4d9347c53da6","modified":1464931491707},{"_id":"public/tags/js/index.html","hash":"2bfaa9ba6664e577bc3fe72f5f481eb3cc9387d4","modified":1464931491707},{"_id":"public/2016/06/03/this/index.html","hash":"7059352a592c1b86292fd03e027704de12fdb1e6","modified":1464931491707},{"_id":"public/2016/05/12/function-how-far/index.html","hash":"b70dfdeb4053373883451651e4dd3ea4dda295be","modified":1464931491707},{"_id":"public/2016/05/11/how-to-prevent-repeating-send-ajax/index.html","hash":"25deb004420b9e2805b9cb9cde7858d3e9384574","modified":1464931491708},{"_id":"public/index.html","hash":"ac77f221b0c63fcea8a6174751e4944d50eda8db","modified":1464931491708},{"_id":"public/favicon.png","hash":"3247c02b3e3516aca534bcfa7a7c34b30defa298","modified":1464931491734},{"_id":"public/favicon.ico","hash":"bbfe456d427483c27cda0bd10fec5cc1f848c1f1","modified":1464931491735},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"381e91e67e85bfda09ce8b88205d93d9a7d20d4d","modified":1464931491735},{"_id":"public/fancybox/blank.gif","hash":"4ffebfc1255c0da73aab342450a9ee09fcaccb86","modified":1464931491735},{"_id":"public/fancybox/fancybox_loading.gif","hash":"4fbaf63664f65a42bef60289c887cd61a925ce4c","modified":1464931491735},{"_id":"public/fancybox/fancybox_overlay.png","hash":"beb714da455e5dbdbf7b2ed466ff4308c103addb","modified":1464931491735},{"_id":"public/fancybox/fancybox_sprite.png","hash":"0657b6b574bafc4c819c7d6c3bc5dd7205c8eee7","modified":1464931491735},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"ecf1523aefe416a4cc901ab4cda5d488e3d9cd76","modified":1464931491735},{"_id":"public/fonts/fontawesome-webfont.eot","hash":"0183979056f0b87616cd99d5c54a48f3b771eee6","modified":1464931491735},{"_id":"public/img/github-sprite.png","hash":"7e3ba97164323840fbe3a175b8535087ece93711","modified":1464931491735},{"_id":"public/img/glyphicons-halflings-white.png","hash":"3f6acfb147851b261f24b030a840b758c4667e26","modified":1464931491735},{"_id":"public/fonts/fontawesome-webfont.woff","hash":"7d65e0227d0d7cdc1718119cd2a7dce0638f151c","modified":1464931491735},{"_id":"public/img/glyphicons-halflings.png","hash":"0b92d4a64699af327eff00b727f1aa46361debfa","modified":1464931491736},{"_id":"public/img/grid-18px-masked.png","hash":"2a5b89bc935f2a53870f8788b573971dc3ac7358","modified":1464931491736},{"_id":"public/img/grid-baseline-20px.png","hash":"f51efa3d9ee45c6053bb76244fdf7dd8967b7b6b","modified":1464931491736},{"_id":"public/css/fonts/Fixedsys500c.eot","hash":"49611cf2e4d7e5c489c191f994ba7ac315bcce5c","modified":1464931491736},{"_id":"public/css/fonts/Fixedsys500c.ttf","hash":"19a8e49df8611dd0d90133a2eb0e410c23932db4","modified":1464931491736},{"_id":"public/css/fonts/Fixedsys500c.otf","hash":"e1fede43e072a990b9cd9899cdd26b78b30d305d","modified":1464931491736},{"_id":"public/css/fonts/Fixedsys500c.woff","hash":"21f8e34c5e252a54710c5f6b0e363b9c43f979b2","modified":1464931491736},{"_id":"public/fonts/google-fonts/0XxGQsSc1g4rdRdjJKZrNBsxEYwM7FgeyaSgU71cLG0.woff","hash":"33225e85c33279e7b4f0c5c65ff93bec740dd59c","modified":1464931491736},{"_id":"public/fonts/google-fonts/0AKsP294HTD-nvJgucYTaIbN6UDyHWBl620a-IRfuBk.woff","hash":"1d9bb14c006d39d7eb0812a85567c7431f899b8d","modified":1464931491736},{"_id":"public/fonts/google-fonts/2UX7WLTfW3W8TclTUvlFyQ.woff","hash":"87deb174af2e2beebb9f09d618a5159ca299a3d0","modified":1464931491736},{"_id":"public/fonts/google-fonts/PIPMHY90P7jtyjpXuZ2cLD8E0i7KZn-EPnyo3HZu7kw.woff","hash":"18dc51e642b4df958098d3bbc6d3ba0237ef6150","modified":1464931491737},{"_id":"public/fonts/google-fonts/UyYrYy3ltEffJV9QueSi4RdbPw3QSf9R-kE0EsQUn2A.woff","hash":"d9f913d09bb3c25749daf8e7ab829c850a842929","modified":1464931491737},{"_id":"public/fonts/google-fonts/cj2hUnSRBhwmSPr9kS5899kZXW4sYc4BjuAIFc1SXII.woff","hash":"17a484b92c0dacc8e8b4f0d38ccc1db400819d1d","modified":1464931491737},{"_id":"public/fonts/google-fonts/lILlYDvubYemzYzN7GbLkHhCUOGz7vYGh680lGh-uXM.woff","hash":"e6c9f1e5a6a966a8f7250201356f351890a48921","modified":1464931491737},{"_id":"public/fonts/google-fonts/LKf8nhXsWg5ybwEGXk8UBQ.woff","hash":"f401d51152681048c06187c5d3919b1407b899c5","modified":1464931491737},{"_id":"public/fonts/FontAwesome.otf","hash":"6270a4a561a69fef5f5cc18cdf9efc256ec2ccbe","modified":1464931491745},{"_id":"public/fonts/fontawesome-webfont.ttf","hash":"6225ccc4ec94d060f19efab97ca42d842845b949","modified":1464931491746},{"_id":"public/css/fonts/Fixedsys500c.svg","hash":"584b95873e60ea5d4212dc42cb37f4643d3a1915","modified":1464931491747},{"_id":"public/css/google-fonts.css","hash":"06db66e315b47f844fb208b50e5710606360b142","modified":1464931491751},{"_id":"public/css/responsive.css","hash":"30f6a26aa0a5368d24a68575eb3fe254de7b92d2","modified":1464931491751},{"_id":"public/css/highlight.css","hash":"97dee196bb0cc2cf9b1de0878d2808f3bf883250","modified":1464931491751},{"_id":"public/css/style.css","hash":"7e619e043cfc365de01289f847b225fd24d2466c","modified":1464931491751},{"_id":"public/fancybox/jquery.fancybox.css","hash":"cbb69ef9748bf92edc3eb4b269b77ad25465d049","modified":1464931491751},{"_id":"public/js/gallery.js","hash":"10cad81731825178f3d30b80a2694a377c1fb7a6","modified":1464931491751},{"_id":"public/js/jquery.imagesloaded.min.js","hash":"3eb6381d2ed4b706020e4be5aff024aab4bcabc5","modified":1464931491752},{"_id":"public/js/main.js","hash":"e3fcd795564533a3984b0ce327bd8dff44145f89","modified":1464931491752},{"_id":"public/js/search.js","hash":"a882244488031de498176fc6af35cea2a13c7a18","modified":1464931491752},{"_id":"public/css/font-awesome.css","hash":"180959029f82028c2100b7eeec7665412a49e588","modified":1464931491752},{"_id":"public/css/bootstrap-responsive.css","hash":"ea29a73addac5004ba4e7e4860e895cf15a5aa31","modified":1464931491752},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1464931491752},{"_id":"public/js/bootstrap.min.js","hash":"5814e91bb6276f4de8b7951c965f2f190a03978d","modified":1464931491752},{"_id":"public/css/bootstrap.min.css","hash":"468c662a80ef582fa1ae492ebe5d415c9b275818","modified":1464931491752},{"_id":"public/js/jquery-2.0.3.min.js","hash":"28daf1b2a995cc4de81154a9a9ebdbb98f7c9997","modified":1464931491752},{"_id":"public/css/bootstrap.css.map","hash":"6925683e03d7cae9dc542bfcca38eccf6f66169c","modified":1464931491756},{"_id":"public/fonts/fontawesome-webfont.svg","hash":"e471023286b7dd1d2ccc72f670a471cfdfeafab7","modified":1464931491758}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2016-05-11T06:23:29.000Z","_content":"\n## 关于我  \n\n我是一个很懒的人，你懂的。\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2016-05-11 14:23:29\n---\n\n## 关于我  \n\n我是一个很懒的人，你懂的。\n","updated":"2016-06-03T05:08:48.882Z","path":"about/index.html","comments":1,"layout":"page","_id":"ciozadwqt0001fcl1uqc5jmuu","content":"<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2><p>我是一个很懒的人，你懂的。</p>\n","excerpt":"","more":"<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2><p>我是一个很懒的人，你懂的。</p>\n"},{"title":"categories","date":"2016-05-11T06:20:34.000Z","_content":"## 你知道这是一个分类页面\n","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-05-11 14:20:34\n---\n## 你知道这是一个分类页面\n","updated":"2016-06-03T05:08:48.883Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ciozadwqy0003fcl1wodjsvql","content":"<h2 id=\"你知道这是一个分类页面\"><a href=\"#你知道这是一个分类页面\" class=\"headerlink\" title=\"你知道这是一个分类页面\"></a>你知道这是一个分类页面</h2>","excerpt":"","more":"<h2 id=\"你知道这是一个分类页面\"><a href=\"#你知道这是一个分类页面\" class=\"headerlink\" title=\"你知道这是一个分类页面\"></a>你知道这是一个分类页面</h2>"},{"title":"tags","date":"2016-05-11T06:23:20.000Z","_content":"## 然而并没有tags\n","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-05-11 14:23:20\n---\n## 然而并没有tags\n","updated":"2016-06-03T05:08:48.883Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ciozadwr30006fcl1xe0pk51t","content":"<h2 id=\"然而并没有tags\"><a href=\"#然而并没有tags\" class=\"headerlink\" title=\"然而并没有tags\"></a>然而并没有tags</h2>","excerpt":"","more":"<h2 id=\"然而并没有tags\"><a href=\"#然而并没有tags\" class=\"headerlink\" title=\"然而并没有tags\"></a>然而并没有tags</h2>"}],"Post":[{"title":"babel 入门","date":"2016-05-11T07:08:56.000Z","_content":"## 搭建babel-es2015环境\n### 安装babel\n\n```\nnpm install --save-dev babel-cli\n```\n### 配置babelrc\n* 基础配置\n\n```\nnpm install --save-dev babel-preset-es2015 babel-preset-stage-0\n\n```\n\n> 新建 .babelrc 文件加入字段\n```\n{\n  \"presets\": [\"es2015\", \"stage-0\"],\n  \"plugins\": []\n}\n\n```\n* polyfill配置\n```\nnpm install --save babel-polyfill\n```\n> 文件引入\n```\nimport \"babel-polyfill\";\n```\n\n* runtime 环境配置\n```\n$ npm install --save-dev babel-plugin-transform-runtime\n$ npm install --save babel-runtime\n```\n> .babelrc 加入\n```\n{\n  \"plugins\": [\"transform-runtime\"]\n}\n\n```\n","source":"_posts/babel-getting-start.md","raw":"---\ntitle: babel 入门\ndate: 2016-05-11 15:08:56\ntags: [javascript, es6]\n---\n## 搭建babel-es2015环境\n### 安装babel\n\n```\nnpm install --save-dev babel-cli\n```\n### 配置babelrc\n* 基础配置\n\n```\nnpm install --save-dev babel-preset-es2015 babel-preset-stage-0\n\n```\n\n> 新建 .babelrc 文件加入字段\n```\n{\n  \"presets\": [\"es2015\", \"stage-0\"],\n  \"plugins\": []\n}\n\n```\n* polyfill配置\n```\nnpm install --save babel-polyfill\n```\n> 文件引入\n```\nimport \"babel-polyfill\";\n```\n\n* runtime 环境配置\n```\n$ npm install --save-dev babel-plugin-transform-runtime\n$ npm install --save babel-runtime\n```\n> .babelrc 加入\n```\n{\n  \"plugins\": [\"transform-runtime\"]\n}\n\n```\n","slug":"babel-getting-start","published":1,"updated":"2016-05-13T11:11:33.366Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciozadwqo0000fcl110cpnwhc","content":"<h2 id=\"搭建babel-es2015环境\"><a href=\"#搭建babel-es2015环境\" class=\"headerlink\" title=\"搭建babel-es2015环境\"></a>搭建babel-es2015环境</h2><h3 id=\"安装babel\"><a href=\"#安装babel\" class=\"headerlink\" title=\"安装babel\"></a>安装babel</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev babel-cli</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置babelrc\"><a href=\"#配置babelrc\" class=\"headerlink\" title=\"配置babelrc\"></a>配置babelrc</h3><ul>\n<li>基础配置</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev babel-preset-es2015 babel-preset-stage-0</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>新建 .babelrc 文件加入字段<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;presets&quot;: [&quot;es2015&quot;, &quot;stage-0&quot;],</span><br><span class=\"line\">  &quot;plugins&quot;: []</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<ul>\n<li>polyfill配置<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save babel-polyfill</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>文件引入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &quot;babel-polyfill&quot;;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<ul>\n<li>runtime 环境配置<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install --save-dev babel-plugin-transform-runtime</span><br><span class=\"line\">$ npm install --save babel-runtime</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>.babelrc 加入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;plugins&quot;: [&quot;transform-runtime&quot;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n","excerpt":"","more":"<h2 id=\"搭建babel-es2015环境\"><a href=\"#搭建babel-es2015环境\" class=\"headerlink\" title=\"搭建babel-es2015环境\"></a>搭建babel-es2015环境</h2><h3 id=\"安装babel\"><a href=\"#安装babel\" class=\"headerlink\" title=\"安装babel\"></a>安装babel</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev babel-cli</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置babelrc\"><a href=\"#配置babelrc\" class=\"headerlink\" title=\"配置babelrc\"></a>配置babelrc</h3><ul>\n<li>基础配置</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev babel-preset-es2015 babel-preset-stage-0</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>新建 .babelrc 文件加入字段<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;presets&quot;: [&quot;es2015&quot;, &quot;stage-0&quot;],</span><br><span class=\"line\">  &quot;plugins&quot;: []</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<ul>\n<li>polyfill配置<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save babel-polyfill</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>文件引入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &quot;babel-polyfill&quot;;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<ul>\n<li>runtime 环境配置<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install --save-dev babel-plugin-transform-runtime</span><br><span class=\"line\">$ npm install --save babel-runtime</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>.babelrc 加入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;plugins&quot;: [&quot;transform-runtime&quot;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n"},{"title":"es6模块","date":"2016-05-11T07:05:00.000Z","_content":"# es6 Module\n\n## export\n\n#### export 输出方式一：\n```\nexport var firstName = \"Galen\";\nexport var lastName = \"Jiang\";\nexport var year = \"1985\";\n```\n#### export 输出方式二：\n```\nvar firstName = \"Galen\";\nvar lastName = \"Jiang\";\nvar year = \"1985\";\nexport {firstName, lastName, year};\n```\n#### 输出重命名\n```\nexport {\n  firstName as fN,\n  lastName as lN,\n  year as y\n}\n```\n\n\n\n## import\n\n#### 输入命令\n```\nimport { firstName, lastName, year } from './app'\n\nconsole.log(firstName)\n```\n#### 输入重命名\n```\nimport { firstName as fN } from './app'\n\n```\n#### 整体输入\n```\nimport * as person from './app';\nconsole.log(person.firstName);\nconsole.log(person.lastName);\n\n```\n\n#### export default默认输出输入\n```\nexport default function(){\nconsole.log(\"foo\")\n}\n或者\nexport default function foo(){\nconsole.log(\"foo\")\n}\n或者\nfunction foo() {\n  console.log(\"foo\");\n}\nexport default foo;\n\nimport foo from './app';\nfoo()\n```\n","source":"_posts/es6-module.md","raw":"---\ntitle: es6模块\ndate: 2016-05-11 15:05:00\ntags: [javascript,es6]\n---\n# es6 Module\n\n## export\n\n#### export 输出方式一：\n```\nexport var firstName = \"Galen\";\nexport var lastName = \"Jiang\";\nexport var year = \"1985\";\n```\n#### export 输出方式二：\n```\nvar firstName = \"Galen\";\nvar lastName = \"Jiang\";\nvar year = \"1985\";\nexport {firstName, lastName, year};\n```\n#### 输出重命名\n```\nexport {\n  firstName as fN,\n  lastName as lN,\n  year as y\n}\n```\n\n\n\n## import\n\n#### 输入命令\n```\nimport { firstName, lastName, year } from './app'\n\nconsole.log(firstName)\n```\n#### 输入重命名\n```\nimport { firstName as fN } from './app'\n\n```\n#### 整体输入\n```\nimport * as person from './app';\nconsole.log(person.firstName);\nconsole.log(person.lastName);\n\n```\n\n#### export default默认输出输入\n```\nexport default function(){\nconsole.log(\"foo\")\n}\n或者\nexport default function foo(){\nconsole.log(\"foo\")\n}\n或者\nfunction foo() {\n  console.log(\"foo\");\n}\nexport default foo;\n\nimport foo from './app';\nfoo()\n```\n","slug":"es6-module","published":1,"updated":"2016-05-13T11:11:33.367Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciozadwqu0002fcl1za1tx7x2","content":"<h1 id=\"es6-Module\"><a href=\"#es6-Module\" class=\"headerlink\" title=\"es6 Module\"></a>es6 Module</h1><h2 id=\"export\"><a href=\"#export\" class=\"headerlink\" title=\"export\"></a>export</h2><h4 id=\"export-输出方式一：\"><a href=\"#export-输出方式一：\" class=\"headerlink\" title=\"export 输出方式一：\"></a>export 输出方式一：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export var firstName = &quot;Galen&quot;;</span><br><span class=\"line\">export var lastName = &quot;Jiang&quot;;</span><br><span class=\"line\">export var year = &quot;1985&quot;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"export-输出方式二：\"><a href=\"#export-输出方式二：\" class=\"headerlink\" title=\"export 输出方式二：\"></a>export 输出方式二：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var firstName = &quot;Galen&quot;;</span><br><span class=\"line\">var lastName = &quot;Jiang&quot;;</span><br><span class=\"line\">var year = &quot;1985&quot;;</span><br><span class=\"line\">export &#123;firstName, lastName, year&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"输出重命名\"><a href=\"#输出重命名\" class=\"headerlink\" title=\"输出重命名\"></a>输出重命名</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export &#123;</span><br><span class=\"line\">  firstName as fN,</span><br><span class=\"line\">  lastName as lN,</span><br><span class=\"line\">  year as y</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"import\"><a href=\"#import\" class=\"headerlink\" title=\"import\"></a>import</h2><h4 id=\"输入命令\"><a href=\"#输入命令\" class=\"headerlink\" title=\"输入命令\"></a>输入命令</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; firstName, lastName, year &#125; from &apos;./app&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(firstName)</span><br></pre></td></tr></table></figure>\n<h4 id=\"输入重命名\"><a href=\"#输入重命名\" class=\"headerlink\" title=\"输入重命名\"></a>输入重命名</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; firstName as fN &#125; from &apos;./app&apos;</span><br></pre></td></tr></table></figure>\n<h4 id=\"整体输入\"><a href=\"#整体输入\" class=\"headerlink\" title=\"整体输入\"></a>整体输入</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as person from &apos;./app&apos;;</span><br><span class=\"line\">console.log(person.firstName);</span><br><span class=\"line\">console.log(person.lastName);</span><br></pre></td></tr></table></figure>\n<h4 id=\"export-default默认输出输入\"><a href=\"#export-default默认输出输入\" class=\"headerlink\" title=\"export default默认输出输入\"></a>export default默认输出输入</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default function()&#123;</span><br><span class=\"line\">console.log(&quot;foo&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">或者</span><br><span class=\"line\">export default function foo()&#123;</span><br><span class=\"line\">console.log(&quot;foo&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">或者</span><br><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">  console.log(&quot;foo&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default foo;</span><br><span class=\"line\"></span><br><span class=\"line\">import foo from &apos;./app&apos;;</span><br><span class=\"line\">foo()</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"es6-Module\"><a href=\"#es6-Module\" class=\"headerlink\" title=\"es6 Module\"></a>es6 Module</h1><h2 id=\"export\"><a href=\"#export\" class=\"headerlink\" title=\"export\"></a>export</h2><h4 id=\"export-输出方式一：\"><a href=\"#export-输出方式一：\" class=\"headerlink\" title=\"export 输出方式一：\"></a>export 输出方式一：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export var firstName = &quot;Galen&quot;;</span><br><span class=\"line\">export var lastName = &quot;Jiang&quot;;</span><br><span class=\"line\">export var year = &quot;1985&quot;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"export-输出方式二：\"><a href=\"#export-输出方式二：\" class=\"headerlink\" title=\"export 输出方式二：\"></a>export 输出方式二：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var firstName = &quot;Galen&quot;;</span><br><span class=\"line\">var lastName = &quot;Jiang&quot;;</span><br><span class=\"line\">var year = &quot;1985&quot;;</span><br><span class=\"line\">export &#123;firstName, lastName, year&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"输出重命名\"><a href=\"#输出重命名\" class=\"headerlink\" title=\"输出重命名\"></a>输出重命名</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export &#123;</span><br><span class=\"line\">  firstName as fN,</span><br><span class=\"line\">  lastName as lN,</span><br><span class=\"line\">  year as y</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"import\"><a href=\"#import\" class=\"headerlink\" title=\"import\"></a>import</h2><h4 id=\"输入命令\"><a href=\"#输入命令\" class=\"headerlink\" title=\"输入命令\"></a>输入命令</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; firstName, lastName, year &#125; from &apos;./app&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(firstName)</span><br></pre></td></tr></table></figure>\n<h4 id=\"输入重命名\"><a href=\"#输入重命名\" class=\"headerlink\" title=\"输入重命名\"></a>输入重命名</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; firstName as fN &#125; from &apos;./app&apos;</span><br></pre></td></tr></table></figure>\n<h4 id=\"整体输入\"><a href=\"#整体输入\" class=\"headerlink\" title=\"整体输入\"></a>整体输入</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as person from &apos;./app&apos;;</span><br><span class=\"line\">console.log(person.firstName);</span><br><span class=\"line\">console.log(person.lastName);</span><br></pre></td></tr></table></figure>\n<h4 id=\"export-default默认输出输入\"><a href=\"#export-default默认输出输入\" class=\"headerlink\" title=\"export default默认输出输入\"></a>export default默认输出输入</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default function()&#123;</span><br><span class=\"line\">console.log(&quot;foo&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">或者</span><br><span class=\"line\">export default function foo()&#123;</span><br><span class=\"line\">console.log(&quot;foo&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">或者</span><br><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">  console.log(&quot;foo&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default foo;</span><br><span class=\"line\"></span><br><span class=\"line\">import foo from &apos;./app&apos;;</span><br><span class=\"line\">foo()</span><br></pre></td></tr></table></figure>\n"},{"title":"我的程序猿生涯。。。","date":"2016-05-10T14:15:14.000Z","_content":"## 接触   \n踏入程序员圈子已经快一年。确切来说从2015年年初确定选择编程作为今后的职业发展开始。曾自学过java几个月，边看书边码字，记得那时候根本没搞明白java能干嘛。后来经过经过老婆熟识的一个客户介绍说，现在最火的是js，当时根本也搞不清楚前端时啥，后端是啥的。反正在职业选择的一个迷茫期，有高人指点，也确实让我离开了这个困惑时期。其实直到最近才明白一句话，一入前端深似海，回想当时怎么有那个勇气转行的。后来的事情就一路顺利了，网上认识一位大神，入了他的群，并且听了他的建议去了某培训机构学了2个月，开始找工作。这时候对编码也算是入了门了。\n\n## 认知\n  时间过得飞快，工作了也有8个月时间，期间受到各同事照顾，期间学了很多前端有关的东西。\n  ```html``` ```css``` ```js``` 的各种奇异技巧学了很多。\n\n ## 熟知\n\n    未完待续。。。\n","source":"_posts/first-blog.md","raw":"---\ntitle: 我的程序猿生涯。。。\ndate: 2016-05-10 22:15:14\ntags: [others]\n---\n## 接触   \n踏入程序员圈子已经快一年。确切来说从2015年年初确定选择编程作为今后的职业发展开始。曾自学过java几个月，边看书边码字，记得那时候根本没搞明白java能干嘛。后来经过经过老婆熟识的一个客户介绍说，现在最火的是js，当时根本也搞不清楚前端时啥，后端是啥的。反正在职业选择的一个迷茫期，有高人指点，也确实让我离开了这个困惑时期。其实直到最近才明白一句话，一入前端深似海，回想当时怎么有那个勇气转行的。后来的事情就一路顺利了，网上认识一位大神，入了他的群，并且听了他的建议去了某培训机构学了2个月，开始找工作。这时候对编码也算是入了门了。\n\n## 认知\n  时间过得飞快，工作了也有8个月时间，期间受到各同事照顾，期间学了很多前端有关的东西。\n  ```html``` ```css``` ```js``` 的各种奇异技巧学了很多。\n\n ## 熟知\n\n    未完待续。。。\n","slug":"first-blog","published":1,"updated":"2016-05-13T11:11:33.367Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciozadwr10005fcl1q1b7oak4","content":"<h2 id=\"接触\"><a href=\"#接触\" class=\"headerlink\" title=\"接触\"></a>接触</h2><p>踏入程序员圈子已经快一年。确切来说从2015年年初确定选择编程作为今后的职业发展开始。曾自学过java几个月，边看书边码字，记得那时候根本没搞明白java能干嘛。后来经过经过老婆熟识的一个客户介绍说，现在最火的是js，当时根本也搞不清楚前端时啥，后端是啥的。反正在职业选择的一个迷茫期，有高人指点，也确实让我离开了这个困惑时期。其实直到最近才明白一句话，一入前端深似海，回想当时怎么有那个勇气转行的。后来的事情就一路顺利了，网上认识一位大神，入了他的群，并且听了他的建议去了某培训机构学了2个月，开始找工作。这时候对编码也算是入了门了。</p>\n<h2 id=\"认知\"><a href=\"#认知\" class=\"headerlink\" title=\"认知\"></a>认知</h2><p>  时间过得飞快，工作了也有8个月时间，期间受到各同事照顾，期间学了很多前端有关的东西。<br>  <code>html</code> <code>css</code> <code>js</code> 的各种奇异技巧学了很多。</p>\n<h2 id=\"熟知\"><a href=\"#熟知\" class=\"headerlink\" title=\"熟知\"></a>熟知</h2><pre><code>未完待续。。。\n</code></pre>","excerpt":"","more":"<h2 id=\"接触\"><a href=\"#接触\" class=\"headerlink\" title=\"接触\"></a>接触</h2><p>踏入程序员圈子已经快一年。确切来说从2015年年初确定选择编程作为今后的职业发展开始。曾自学过java几个月，边看书边码字，记得那时候根本没搞明白java能干嘛。后来经过经过老婆熟识的一个客户介绍说，现在最火的是js，当时根本也搞不清楚前端时啥，后端是啥的。反正在职业选择的一个迷茫期，有高人指点，也确实让我离开了这个困惑时期。其实直到最近才明白一句话，一入前端深似海，回想当时怎么有那个勇气转行的。后来的事情就一路顺利了，网上认识一位大神，入了他的群，并且听了他的建议去了某培训机构学了2个月，开始找工作。这时候对编码也算是入了门了。</p>\n<h2 id=\"认知\"><a href=\"#认知\" class=\"headerlink\" title=\"认知\"></a>认知</h2><p>  时间过得飞快，工作了也有8个月时间，期间受到各同事照顾，期间学了很多前端有关的东西。<br>  <code>html</code> <code>css</code> <code>js</code> 的各种奇异技巧学了很多。</p>\n<h2 id=\"熟知\"><a href=\"#熟知\" class=\"headerlink\" title=\"熟知\"></a>熟知</h2><pre><code>未完待续。。。\n</code></pre>"},{"title":"function how far","date":"2016-05-12T01:46:54.000Z","_content":"\n# 最原始的fastClick\n\n```javascript\nvar oDiv = document.getElementById('div1'),\n    fastClick = true;\n\nfunction click() {\n\n    setTimeout(function(){\n        fastClick = true;\n    },1000)\n    console.log('点击了');\n\n}\n\noDiv.addEventListener('click',function(){\n\n    if(fastClick){\n        fastClick = false;\n        click();\n    }\n\n},false);\n```\n\n# 面向对象方式进行包装\n\n```javascript\nfunction $(el){\n\n    var oEl = document.getElementById(el);\n    this.fastClick = true;\n\n}\n\n$.prototype.add = function(type, callback){\n\n    document.addEventListener(type, function(){\n\n        if(this.fastClick){\n            this.fastClick = false;\n            callback();\n            setTimeout(function(){\n                this.fastClick = true;\n            }.bind(this),1000)\n        }\n\n    }.bind(this),false);\n\n}\n\nfunction click(){\n\n    console.log('点击了');\n\n}\n\n\nvar oDiv1 = new $('div1');\noDiv1.add('click',click)\n```\n\n### 面向函数版\n\n```javascript\nvar oDiv = document.getElementById('div1');\n\nfunction delay(callback){\n\n    var fastClick = true;\n    return function(){\n\n        if(fastClick){\n            fastClick = false;\n            callback();\n            setTimeout(function(){\n                fastClick = true;\n            },1000)\n        }\n\n    }\n\n}\n\nfunction click(){\n\n    console.log('点击了');\n\n}\n\noDiv.addEventListener('click',delay(click),false);\n```\n\n### 如何扩展 Promise\n\n```javascript\n\nvar oDiv = document.getElementById('div1');\n\nfunction delay(callback){\n    var status = 'resolve';\n    return function(){\n        if(status === 'pending'){\n            return false;\n        }else{\n            status = 'pending'\n            callback().then(function(){\n                status = 'resolve'\n            })\n        }\n    }\n}\n\nfunction click(msg){\n    return new Promise(function(resolve, reject){\n        console.log('刚点击消息还没回来')\n        setTimeout(function(){\n            console.log('消息：' + msg)\n            resolve();\n        },1000)\n    })\n\n}\n\noDiv.addEventListener('click',delay(click.bind(null,'hello')),false)\n\n```\n\n\n# 各种畅想~\n\n```\nunderscore lodash Rxjs\n```\n","source":"_posts/function-how-far.md","raw":"---\ntitle: function how far\ndate: 2016-05-12T09:46:54.000Z\ntags:\n  - javascript\n---\n\n# 最原始的fastClick\n\n```javascript\nvar oDiv = document.getElementById('div1'),\n    fastClick = true;\n\nfunction click() {\n\n    setTimeout(function(){\n        fastClick = true;\n    },1000)\n    console.log('点击了');\n\n}\n\noDiv.addEventListener('click',function(){\n\n    if(fastClick){\n        fastClick = false;\n        click();\n    }\n\n},false);\n```\n\n# 面向对象方式进行包装\n\n```javascript\nfunction $(el){\n\n    var oEl = document.getElementById(el);\n    this.fastClick = true;\n\n}\n\n$.prototype.add = function(type, callback){\n\n    document.addEventListener(type, function(){\n\n        if(this.fastClick){\n            this.fastClick = false;\n            callback();\n            setTimeout(function(){\n                this.fastClick = true;\n            }.bind(this),1000)\n        }\n\n    }.bind(this),false);\n\n}\n\nfunction click(){\n\n    console.log('点击了');\n\n}\n\n\nvar oDiv1 = new $('div1');\noDiv1.add('click',click)\n```\n\n### 面向函数版\n\n```javascript\nvar oDiv = document.getElementById('div1');\n\nfunction delay(callback){\n\n    var fastClick = true;\n    return function(){\n\n        if(fastClick){\n            fastClick = false;\n            callback();\n            setTimeout(function(){\n                fastClick = true;\n            },1000)\n        }\n\n    }\n\n}\n\nfunction click(){\n\n    console.log('点击了');\n\n}\n\noDiv.addEventListener('click',delay(click),false);\n```\n\n### 如何扩展 Promise\n\n```javascript\n\nvar oDiv = document.getElementById('div1');\n\nfunction delay(callback){\n    var status = 'resolve';\n    return function(){\n        if(status === 'pending'){\n            return false;\n        }else{\n            status = 'pending'\n            callback().then(function(){\n                status = 'resolve'\n            })\n        }\n    }\n}\n\nfunction click(msg){\n    return new Promise(function(resolve, reject){\n        console.log('刚点击消息还没回来')\n        setTimeout(function(){\n            console.log('消息：' + msg)\n            resolve();\n        },1000)\n    })\n\n}\n\noDiv.addEventListener('click',delay(click.bind(null,'hello')),false)\n\n```\n\n\n# 各种畅想~\n\n```\nunderscore lodash Rxjs\n```\n","slug":"function-how-far","published":1,"updated":"2016-05-13T11:11:33.367Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciozadwr40007fcl13umspt18","content":"<h1 id=\"最原始的fastClick\"><a href=\"#最原始的fastClick\" class=\"headerlink\" title=\"最原始的fastClick\"></a>最原始的fastClick</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> oDiv = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'div1'</span>),</span><br><span class=\"line\">    fastClick = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">click</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        fastClick = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'点击了'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">oDiv.addEventListener(<span class=\"string\">'click'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(fastClick)&#123;</span><br><span class=\"line\">        fastClick = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        click();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,<span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n<h1 id=\"面向对象方式进行包装\"><a href=\"#面向对象方式进行包装\" class=\"headerlink\" title=\"面向对象方式进行包装\"></a>面向对象方式进行包装</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">$</span>(<span class=\"params\">el</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> oEl = <span class=\"built_in\">document</span>.getElementById(el);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.fastClick = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$.prototype.add = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">type, callback</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">document</span>.addEventListener(type, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.fastClick)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.fastClick = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            callback();</span><br><span class=\"line\">            setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.fastClick = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;.bind(<span class=\"keyword\">this</span>),<span class=\"number\">1000</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;.bind(<span class=\"keyword\">this</span>),<span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">click</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'点击了'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> oDiv1 = <span class=\"keyword\">new</span> $(<span class=\"string\">'div1'</span>);</span><br><span class=\"line\">oDiv1.add(<span class=\"string\">'click'</span>,click)</span><br></pre></td></tr></table></figure>\n<h3 id=\"面向函数版\"><a href=\"#面向函数版\" class=\"headerlink\" title=\"面向函数版\"></a>面向函数版</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> oDiv = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'div1'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">delay</span>(<span class=\"params\">callback</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> fastClick = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(fastClick)&#123;</span><br><span class=\"line\">            fastClick = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            callback();</span><br><span class=\"line\">            setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">                fastClick = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">click</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'点击了'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">oDiv.addEventListener(<span class=\"string\">'click'</span>,delay(click),<span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"如何扩展-Promise\"><a href=\"#如何扩展-Promise\" class=\"headerlink\" title=\"如何扩展 Promise\"></a>如何扩展 Promise</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> oDiv = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'div1'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">delay</span>(<span class=\"params\">callback</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> status = <span class=\"string\">'resolve'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(status === <span class=\"string\">'pending'</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            status = <span class=\"string\">'pending'</span></span><br><span class=\"line\">            callback().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">                status = <span class=\"string\">'resolve'</span></span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">click</span>(<span class=\"params\">msg</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'刚点击消息还没回来'</span>)</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'消息：'</span> + msg)</span><br><span class=\"line\">            resolve();</span><br><span class=\"line\">        &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">oDiv.addEventListener(<span class=\"string\">'click'</span>,delay(click.bind(<span class=\"literal\">null</span>,<span class=\"string\">'hello'</span>)),<span class=\"literal\">false</span>)</span><br></pre></td></tr></table></figure>\n<h1 id=\"各种畅想\"><a href=\"#各种畅想\" class=\"headerlink\" title=\"各种畅想~\"></a>各种畅想~</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">underscore lodash Rxjs</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"最原始的fastClick\"><a href=\"#最原始的fastClick\" class=\"headerlink\" title=\"最原始的fastClick\"></a>最原始的fastClick</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> oDiv = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'div1'</span>),</span><br><span class=\"line\">    fastClick = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">click</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        fastClick = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'点击了'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">oDiv.addEventListener(<span class=\"string\">'click'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(fastClick)&#123;</span><br><span class=\"line\">        fastClick = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        click();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,<span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n<h1 id=\"面向对象方式进行包装\"><a href=\"#面向对象方式进行包装\" class=\"headerlink\" title=\"面向对象方式进行包装\"></a>面向对象方式进行包装</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">$</span>(<span class=\"params\">el</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> oEl = <span class=\"built_in\">document</span>.getElementById(el);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.fastClick = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$.prototype.add = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">type, callback</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">document</span>.addEventListener(type, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.fastClick)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.fastClick = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            callback();</span><br><span class=\"line\">            setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.fastClick = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;.bind(<span class=\"keyword\">this</span>),<span class=\"number\">1000</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;.bind(<span class=\"keyword\">this</span>),<span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">click</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'点击了'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> oDiv1 = <span class=\"keyword\">new</span> $(<span class=\"string\">'div1'</span>);</span><br><span class=\"line\">oDiv1.add(<span class=\"string\">'click'</span>,click)</span><br></pre></td></tr></table></figure>\n<h3 id=\"面向函数版\"><a href=\"#面向函数版\" class=\"headerlink\" title=\"面向函数版\"></a>面向函数版</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> oDiv = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'div1'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">delay</span>(<span class=\"params\">callback</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> fastClick = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(fastClick)&#123;</span><br><span class=\"line\">            fastClick = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            callback();</span><br><span class=\"line\">            setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">                fastClick = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">click</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'点击了'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">oDiv.addEventListener(<span class=\"string\">'click'</span>,delay(click),<span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"如何扩展-Promise\"><a href=\"#如何扩展-Promise\" class=\"headerlink\" title=\"如何扩展 Promise\"></a>如何扩展 Promise</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> oDiv = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'div1'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">delay</span>(<span class=\"params\">callback</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> status = <span class=\"string\">'resolve'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(status === <span class=\"string\">'pending'</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            status = <span class=\"string\">'pending'</span></span><br><span class=\"line\">            callback().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">                status = <span class=\"string\">'resolve'</span></span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">click</span>(<span class=\"params\">msg</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'刚点击消息还没回来'</span>)</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'消息：'</span> + msg)</span><br><span class=\"line\">            resolve();</span><br><span class=\"line\">        &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">oDiv.addEventListener(<span class=\"string\">'click'</span>,delay(click.bind(<span class=\"literal\">null</span>,<span class=\"string\">'hello'</span>)),<span class=\"literal\">false</span>)</span><br></pre></td></tr></table></figure>\n<h1 id=\"各种畅想\"><a href=\"#各种畅想\" class=\"headerlink\" title=\"各种畅想~\"></a>各种畅想~</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">underscore lodash Rxjs</span><br></pre></td></tr></table></figure>\n"},{"title":"git入门","date":"2016-05-11T07:04:04.000Z","_content":"## git bash\n```\ntouch readme.txt // 创建文件\ncat readme.txt // 查看文件\necho text >> readme.txt // 写\n```\n> 工作区>暂存区>历史区\n\n```\ngit add readme.txt // 提交到暂存区\ngit commit -m'update' // 提交到历史区\ngit status -s // 暂存区、历史区\ngit diff //工作区、暂存区不同\ngit log --online // 历史区的记录\ngit log --graph\ngit reset --hard HEAD^ // 上退一个版本 -soft -mixed\ngit reset --hard HEAD 1234567\ngit reflog //每次修改的id号\ngit log --oneline --grep=index.html //过滤\ngit checkout -- readme.txt // 回退暂存区readme.txt文件\ngit reset --hard HEAD readme.txt // 回退历史区readme.txt到工作区\ngit reset (-mixed) HEAD readme.txt // 回退暂存区readme.txt到暂存区区\ngit branch dev // 新建分支 -d 删除分支\ngit branch //查看分支\ngit checkout dev // 切换分支\ngit checkout -b dev // 创建并切换分支\ngit add //\ngit checkout master\ngit merge dev // 合并分支到dev\ngit log --oneline --graph --decorate --all\n\ngit merge --no-f -m'merge with no-off'//产生新的分支\ngit stash // 保存暂存区和工作区到工作台\ngit stash list //查看工作台\ngit stash pop // 应用某个stash并删除\ngit stash apply // 应用某个stash不删除\ngit stash clear //清除工作台\n\ngit tag v1.0 //打标签\ngit tag\ngit show v1.0 // 对象\ngit tag -a v0.8 -m '0.8version'\ngit cherry-pick id...\ngit rebase\n\nrm 1.txt 删除工作区\ngit rm 1.txt 删除工作区和暂存区\ngit rm --cached 删除暂存区\n```\n","source":"_posts/git-getting-start.md","raw":"---\ntitle: git入门\ndate: 2016-05-11 15:04:04\ntags: git\n---\n## git bash\n```\ntouch readme.txt // 创建文件\ncat readme.txt // 查看文件\necho text >> readme.txt // 写\n```\n> 工作区>暂存区>历史区\n\n```\ngit add readme.txt // 提交到暂存区\ngit commit -m'update' // 提交到历史区\ngit status -s // 暂存区、历史区\ngit diff //工作区、暂存区不同\ngit log --online // 历史区的记录\ngit log --graph\ngit reset --hard HEAD^ // 上退一个版本 -soft -mixed\ngit reset --hard HEAD 1234567\ngit reflog //每次修改的id号\ngit log --oneline --grep=index.html //过滤\ngit checkout -- readme.txt // 回退暂存区readme.txt文件\ngit reset --hard HEAD readme.txt // 回退历史区readme.txt到工作区\ngit reset (-mixed) HEAD readme.txt // 回退暂存区readme.txt到暂存区区\ngit branch dev // 新建分支 -d 删除分支\ngit branch //查看分支\ngit checkout dev // 切换分支\ngit checkout -b dev // 创建并切换分支\ngit add //\ngit checkout master\ngit merge dev // 合并分支到dev\ngit log --oneline --graph --decorate --all\n\ngit merge --no-f -m'merge with no-off'//产生新的分支\ngit stash // 保存暂存区和工作区到工作台\ngit stash list //查看工作台\ngit stash pop // 应用某个stash并删除\ngit stash apply // 应用某个stash不删除\ngit stash clear //清除工作台\n\ngit tag v1.0 //打标签\ngit tag\ngit show v1.0 // 对象\ngit tag -a v0.8 -m '0.8version'\ngit cherry-pick id...\ngit rebase\n\nrm 1.txt 删除工作区\ngit rm 1.txt 删除工作区和暂存区\ngit rm --cached 删除暂存区\n```\n","slug":"git-getting-start","published":1,"updated":"2016-05-13T11:11:33.376Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciozadwr70009fcl1x9gh2d3y","content":"<h2 id=\"git-bash\"><a href=\"#git-bash\" class=\"headerlink\" title=\"git bash\"></a>git bash</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch readme.txt // 创建文件</span><br><span class=\"line\">cat readme.txt // 查看文件</span><br><span class=\"line\">echo text &gt;&gt; readme.txt // 写</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>工作区&gt;暂存区&gt;历史区</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add readme.txt // 提交到暂存区</span><br><span class=\"line\">git commit -m&apos;update&apos; // 提交到历史区</span><br><span class=\"line\">git status -s // 暂存区、历史区</span><br><span class=\"line\">git diff //工作区、暂存区不同</span><br><span class=\"line\">git log --online // 历史区的记录</span><br><span class=\"line\">git log --graph</span><br><span class=\"line\">git reset --hard HEAD^ // 上退一个版本 -soft -mixed</span><br><span class=\"line\">git reset --hard HEAD 1234567</span><br><span class=\"line\">git reflog //每次修改的id号</span><br><span class=\"line\">git log --oneline --grep=index.html //过滤</span><br><span class=\"line\">git checkout -- readme.txt // 回退暂存区readme.txt文件</span><br><span class=\"line\">git reset --hard HEAD readme.txt // 回退历史区readme.txt到工作区</span><br><span class=\"line\">git reset (-mixed) HEAD readme.txt // 回退暂存区readme.txt到暂存区区</span><br><span class=\"line\">git branch dev // 新建分支 -d 删除分支</span><br><span class=\"line\">git branch //查看分支</span><br><span class=\"line\">git checkout dev // 切换分支</span><br><span class=\"line\">git checkout -b dev // 创建并切换分支</span><br><span class=\"line\">git add //</span><br><span class=\"line\">git checkout master</span><br><span class=\"line\">git merge dev // 合并分支到dev</span><br><span class=\"line\">git log --oneline --graph --decorate --all</span><br><span class=\"line\"></span><br><span class=\"line\">git merge --no-f -m&apos;merge with no-off&apos;//产生新的分支</span><br><span class=\"line\">git stash // 保存暂存区和工作区到工作台</span><br><span class=\"line\">git stash list //查看工作台</span><br><span class=\"line\">git stash pop // 应用某个stash并删除</span><br><span class=\"line\">git stash apply // 应用某个stash不删除</span><br><span class=\"line\">git stash clear //清除工作台</span><br><span class=\"line\"></span><br><span class=\"line\">git tag v1.0 //打标签</span><br><span class=\"line\">git tag</span><br><span class=\"line\">git show v1.0 // 对象</span><br><span class=\"line\">git tag -a v0.8 -m &apos;0.8version&apos;</span><br><span class=\"line\">git cherry-pick id...</span><br><span class=\"line\">git rebase</span><br><span class=\"line\"></span><br><span class=\"line\">rm 1.txt 删除工作区</span><br><span class=\"line\">git rm 1.txt 删除工作区和暂存区</span><br><span class=\"line\">git rm --cached 删除暂存区</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"git-bash\"><a href=\"#git-bash\" class=\"headerlink\" title=\"git bash\"></a>git bash</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch readme.txt // 创建文件</span><br><span class=\"line\">cat readme.txt // 查看文件</span><br><span class=\"line\">echo text &gt;&gt; readme.txt // 写</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>工作区&gt;暂存区&gt;历史区</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add readme.txt // 提交到暂存区</span><br><span class=\"line\">git commit -m&apos;update&apos; // 提交到历史区</span><br><span class=\"line\">git status -s // 暂存区、历史区</span><br><span class=\"line\">git diff //工作区、暂存区不同</span><br><span class=\"line\">git log --online // 历史区的记录</span><br><span class=\"line\">git log --graph</span><br><span class=\"line\">git reset --hard HEAD^ // 上退一个版本 -soft -mixed</span><br><span class=\"line\">git reset --hard HEAD 1234567</span><br><span class=\"line\">git reflog //每次修改的id号</span><br><span class=\"line\">git log --oneline --grep=index.html //过滤</span><br><span class=\"line\">git checkout -- readme.txt // 回退暂存区readme.txt文件</span><br><span class=\"line\">git reset --hard HEAD readme.txt // 回退历史区readme.txt到工作区</span><br><span class=\"line\">git reset (-mixed) HEAD readme.txt // 回退暂存区readme.txt到暂存区区</span><br><span class=\"line\">git branch dev // 新建分支 -d 删除分支</span><br><span class=\"line\">git branch //查看分支</span><br><span class=\"line\">git checkout dev // 切换分支</span><br><span class=\"line\">git checkout -b dev // 创建并切换分支</span><br><span class=\"line\">git add //</span><br><span class=\"line\">git checkout master</span><br><span class=\"line\">git merge dev // 合并分支到dev</span><br><span class=\"line\">git log --oneline --graph --decorate --all</span><br><span class=\"line\"></span><br><span class=\"line\">git merge --no-f -m&apos;merge with no-off&apos;//产生新的分支</span><br><span class=\"line\">git stash // 保存暂存区和工作区到工作台</span><br><span class=\"line\">git stash list //查看工作台</span><br><span class=\"line\">git stash pop // 应用某个stash并删除</span><br><span class=\"line\">git stash apply // 应用某个stash不删除</span><br><span class=\"line\">git stash clear //清除工作台</span><br><span class=\"line\"></span><br><span class=\"line\">git tag v1.0 //打标签</span><br><span class=\"line\">git tag</span><br><span class=\"line\">git show v1.0 // 对象</span><br><span class=\"line\">git tag -a v0.8 -m &apos;0.8version&apos;</span><br><span class=\"line\">git cherry-pick id...</span><br><span class=\"line\">git rebase</span><br><span class=\"line\"></span><br><span class=\"line\">rm 1.txt 删除工作区</span><br><span class=\"line\">git rm 1.txt 删除工作区和暂存区</span><br><span class=\"line\">git rm --cached 删除暂存区</span><br></pre></td></tr></table></figure>\n"},{"title":"怎样防止重复发送 Ajax 请求？","date":"2016-05-11T06:49:41.000Z","_content":"> 作者：长天之云\n[链接,知乎](https://www.zhihu.com/question/19805411/answer/15465427)\n\n\n不推荐用外部变量锁定或修改按钮状态的方式，因为那样比较难：\n要考虑并理解 success, complete, error, timeout 这些事件的区别，并注册正确的事件，一旦失误，功能将不再可用；\n不可避免地比普通流程要要多注册一个 complete 事件；\n恢复状态的代码很容易和不相干的代码混合在一起；\n\n我推荐用主动查询状态的方式（A、B，jQuery 为例）或工具函数的方式（C、D）来去除重复操作，并提供一些例子作为参考：\n\n## A. 独占型提交\n只允许同时存在一次提交操作，并且直到本次提交完成才能进行下一次提交。\n```javascript\nmodule.submit = function() {\n  if (this.promise_.state() === 'pending') {\n    return\n  }\n  return this.promise_ = $.post('/api/save')\n}\n```\n******\n## B. 贪婪型提交\n无限制的提交，但是以最后一次操作为准；亦即需要尽快给出最后一次操作的反馈，而前面的操作结果并不重要。\n```javascript\nmodule.submit = function() {\n  if (this.promise_.state() === 'pending') {\n    this.promise_.abort()\n  }\n  // todo\n}\n```\n比如某些应用的条目中，有一些进行类似「喜欢」或「不喜欢」操作的二态按钮。如果按下后不立即给出反馈，用户的目光焦点就可能在那个按钮上停顿许久；如果按下时即时切换按钮的状态，再在程序上用 abort 来实现积极的提交，这样既能提高用户体验，还能降低服务器压力，皆大欢喜。\n******\n## C. 节制型提交\n无论提交如何频繁，任意两次有效提交的间隔时间必定会大于或等于某一时间间隔；即以一定频率提交。\n```javascript\nmodule.submit = throttle(150, function() {\n  // todo\n})\n```\n如果客户发送每隔100毫秒发送过来10次请求，此模块将只接收其中6个（每个在时间线上距离为150毫秒）进行处理。\n这也是解决查询冲突的一种可选手段，比如以知乎草稿举例，仔细观察可以发现：\n编辑器的 blur 事件会立即触发保存；\n保存按钮的 click 事件也会立即触发保存；\n但是存在一种情况会使这两个事件在数毫秒内连续发生——当焦点在编辑器内部，并且直接去点击保存按钮——这时用 throttle 来处理是可行的。\n另外还有一些事件处理会很频繁地使用 throttle，如： resize、scroll、mousemove。\n******\n## D. 懒惰型提交\n任意两次提交的间隔时间，必须大于一个指定时间，才会促成有效提交；即不给休息不干活。\n```javascript\nmodule.submit = debounce(150, function() {\n  // todo\n})\n```\n还是以知乎草稿举例，当在编辑器内按下 ctrl + s 时，可以手动保存草稿；如果你连按，程序会表示不理解为什么你要连按，只有等你放弃连按，它才会继续。\n\n*********\n更多记忆中的例子\n\n方式 C 和 方式 D 有时更加通用，比如这些情况：\n游戏中你捡到一把威力强大的高速武器，为了防止你的子弹在屏幕上打成一条直线，可以 throttle 来控制频率；\n在弹幕型游戏里，为了防止你把射击键夹住来进行无脑游戏，可以用 debounce 来控制频率；\n在编译任务里，守护进程监视了某一文件夹里所有的文件（如任一文件的改变都可以触发重新编译，一次执行就需要2秒），但某种操作能够瞬间造成大量文件改变（如 git checkout），这时一个简单的 debounce 可以使编译任务只执行一次。\n\n而方式 C 甚至可以和方式 B 组合使用，比如自动完成组件（Google 首页的搜索就是）：\n当用户快速输入文本时（特别是打字能手），可以 throttle keypress 事件处理函数，以指定时间间隔来提取文本域的值，然后立即进行新的查询；\n当新的查询需要发送，但上一个查询还没返回结果时，可以 abort 未完成的查询，并立即发送新查询；\n\n*******\n\n----- update 2013-01-08 -----\n## E. 记忆型\n```javascript\nvar scrape = memoize(function(url) {\n  return $.post('/scraper', { 'url': url })\n})\n```\n对于同样的参数，其返回始终结果是恒等的——每次都将返回同一对象。\n应用例子有编辑器，如粘贴内容时抓取其中的链接信息，memoize 用以保证同样的链接不会抓取两次。\n******\n----- update 2013-03-27 -----\n## F. 累积型\n前几天处理自动完成事件时得到这个函数，发现也可以用在处理连续事件上，它能够把连续的多次提交合并为一个提交，比如：\n```javascript\nvar request = makePile(5, function() {\n    $.post('/', { list: JSON.stringify([].slice.call(arguments)) })\n})\n\n// 连续发送五次\nrequest({a:1}), request({a:2}), request({a:3}), request({a:4}), request({a:5})\n/* post =>\nlist:[{\"a\":1},{\"a\":2},{\"a\":3},{\"a\":4},{\"a\":5}]\n */\n// 样例实现：\nvar makePile = function(count, onfilter, onvalue) {\n  var values = [], id = function(value) { return value }\n  return function(value) {\n    values.push((onvalue || id).apply(this, arguments))\n    if (values.length === count) {\n      onfilter.apply(this, values)\n      values = []\n    }\n  }\n}\n```\n******\n----- update 2013-04-16 -----\n另一种累积是按时间而不是次数，比如应用在行为统计上，可能在瞬间收集到数十上百类似的行为，这时可以用上面 pile 的结构加上 debounce 来防止大批重复请求（但又不丢失任何统计）：\n```javascript\nvar trackFactory = function(delay, action) {\n  var params = [], slice = [].slice\n  var touch = debounce(delay, function() {\n    if (params.length) {\n      action(params)\n      params = []\n    }\n  })\n  return function() {\n    params.push(slice.call(arguments))\n    touch()\n  }\n}\n\nvar track = trackFactory(550, function(params) {\n  // send tracking request\n})\n```\n## G. 采样型\n这是最近重构时联想到的，一种和上面都不同的去重操作，可以应用在自动加载（timeline）行为控制上：\n```javascript\nautoload.listen(feeds, 'next', sample(3, function() {\n  this.enable()\n}))\n```\n如果 sample 是固化的选择函数（n 选 1），它这实际上会这样工作：\nO-O-X-O-O-X\n\n但「自动加载」的应用可能想要的是（两次自动，一次手动）：\nX-X-O-X-X-O\n\n对于这种情况，可以定义作为配置的选择函数来实现控制：\n```\noptions { sample: (n) => n % 3 !== 0 }\n```\n即每个下一次加载完成之后， 每三次有两次对下一次加载实行自动加载。\n","source":"_posts/how-to-prevent-repeating-send-ajax.md","raw":"---\ntitle: 怎样防止重复发送 Ajax 请求？\ndate: 2016-05-11 14:49:41\ntags: [javascript]\n---\n> 作者：长天之云\n[链接,知乎](https://www.zhihu.com/question/19805411/answer/15465427)\n\n\n不推荐用外部变量锁定或修改按钮状态的方式，因为那样比较难：\n要考虑并理解 success, complete, error, timeout 这些事件的区别，并注册正确的事件，一旦失误，功能将不再可用；\n不可避免地比普通流程要要多注册一个 complete 事件；\n恢复状态的代码很容易和不相干的代码混合在一起；\n\n我推荐用主动查询状态的方式（A、B，jQuery 为例）或工具函数的方式（C、D）来去除重复操作，并提供一些例子作为参考：\n\n## A. 独占型提交\n只允许同时存在一次提交操作，并且直到本次提交完成才能进行下一次提交。\n```javascript\nmodule.submit = function() {\n  if (this.promise_.state() === 'pending') {\n    return\n  }\n  return this.promise_ = $.post('/api/save')\n}\n```\n******\n## B. 贪婪型提交\n无限制的提交，但是以最后一次操作为准；亦即需要尽快给出最后一次操作的反馈，而前面的操作结果并不重要。\n```javascript\nmodule.submit = function() {\n  if (this.promise_.state() === 'pending') {\n    this.promise_.abort()\n  }\n  // todo\n}\n```\n比如某些应用的条目中，有一些进行类似「喜欢」或「不喜欢」操作的二态按钮。如果按下后不立即给出反馈，用户的目光焦点就可能在那个按钮上停顿许久；如果按下时即时切换按钮的状态，再在程序上用 abort 来实现积极的提交，这样既能提高用户体验，还能降低服务器压力，皆大欢喜。\n******\n## C. 节制型提交\n无论提交如何频繁，任意两次有效提交的间隔时间必定会大于或等于某一时间间隔；即以一定频率提交。\n```javascript\nmodule.submit = throttle(150, function() {\n  // todo\n})\n```\n如果客户发送每隔100毫秒发送过来10次请求，此模块将只接收其中6个（每个在时间线上距离为150毫秒）进行处理。\n这也是解决查询冲突的一种可选手段，比如以知乎草稿举例，仔细观察可以发现：\n编辑器的 blur 事件会立即触发保存；\n保存按钮的 click 事件也会立即触发保存；\n但是存在一种情况会使这两个事件在数毫秒内连续发生——当焦点在编辑器内部，并且直接去点击保存按钮——这时用 throttle 来处理是可行的。\n另外还有一些事件处理会很频繁地使用 throttle，如： resize、scroll、mousemove。\n******\n## D. 懒惰型提交\n任意两次提交的间隔时间，必须大于一个指定时间，才会促成有效提交；即不给休息不干活。\n```javascript\nmodule.submit = debounce(150, function() {\n  // todo\n})\n```\n还是以知乎草稿举例，当在编辑器内按下 ctrl + s 时，可以手动保存草稿；如果你连按，程序会表示不理解为什么你要连按，只有等你放弃连按，它才会继续。\n\n*********\n更多记忆中的例子\n\n方式 C 和 方式 D 有时更加通用，比如这些情况：\n游戏中你捡到一把威力强大的高速武器，为了防止你的子弹在屏幕上打成一条直线，可以 throttle 来控制频率；\n在弹幕型游戏里，为了防止你把射击键夹住来进行无脑游戏，可以用 debounce 来控制频率；\n在编译任务里，守护进程监视了某一文件夹里所有的文件（如任一文件的改变都可以触发重新编译，一次执行就需要2秒），但某种操作能够瞬间造成大量文件改变（如 git checkout），这时一个简单的 debounce 可以使编译任务只执行一次。\n\n而方式 C 甚至可以和方式 B 组合使用，比如自动完成组件（Google 首页的搜索就是）：\n当用户快速输入文本时（特别是打字能手），可以 throttle keypress 事件处理函数，以指定时间间隔来提取文本域的值，然后立即进行新的查询；\n当新的查询需要发送，但上一个查询还没返回结果时，可以 abort 未完成的查询，并立即发送新查询；\n\n*******\n\n----- update 2013-01-08 -----\n## E. 记忆型\n```javascript\nvar scrape = memoize(function(url) {\n  return $.post('/scraper', { 'url': url })\n})\n```\n对于同样的参数，其返回始终结果是恒等的——每次都将返回同一对象。\n应用例子有编辑器，如粘贴内容时抓取其中的链接信息，memoize 用以保证同样的链接不会抓取两次。\n******\n----- update 2013-03-27 -----\n## F. 累积型\n前几天处理自动完成事件时得到这个函数，发现也可以用在处理连续事件上，它能够把连续的多次提交合并为一个提交，比如：\n```javascript\nvar request = makePile(5, function() {\n    $.post('/', { list: JSON.stringify([].slice.call(arguments)) })\n})\n\n// 连续发送五次\nrequest({a:1}), request({a:2}), request({a:3}), request({a:4}), request({a:5})\n/* post =>\nlist:[{\"a\":1},{\"a\":2},{\"a\":3},{\"a\":4},{\"a\":5}]\n */\n// 样例实现：\nvar makePile = function(count, onfilter, onvalue) {\n  var values = [], id = function(value) { return value }\n  return function(value) {\n    values.push((onvalue || id).apply(this, arguments))\n    if (values.length === count) {\n      onfilter.apply(this, values)\n      values = []\n    }\n  }\n}\n```\n******\n----- update 2013-04-16 -----\n另一种累积是按时间而不是次数，比如应用在行为统计上，可能在瞬间收集到数十上百类似的行为，这时可以用上面 pile 的结构加上 debounce 来防止大批重复请求（但又不丢失任何统计）：\n```javascript\nvar trackFactory = function(delay, action) {\n  var params = [], slice = [].slice\n  var touch = debounce(delay, function() {\n    if (params.length) {\n      action(params)\n      params = []\n    }\n  })\n  return function() {\n    params.push(slice.call(arguments))\n    touch()\n  }\n}\n\nvar track = trackFactory(550, function(params) {\n  // send tracking request\n})\n```\n## G. 采样型\n这是最近重构时联想到的，一种和上面都不同的去重操作，可以应用在自动加载（timeline）行为控制上：\n```javascript\nautoload.listen(feeds, 'next', sample(3, function() {\n  this.enable()\n}))\n```\n如果 sample 是固化的选择函数（n 选 1），它这实际上会这样工作：\nO-O-X-O-O-X\n\n但「自动加载」的应用可能想要的是（两次自动，一次手动）：\nX-X-O-X-X-O\n\n对于这种情况，可以定义作为配置的选择函数来实现控制：\n```\noptions { sample: (n) => n % 3 !== 0 }\n```\n即每个下一次加载完成之后， 每三次有两次对下一次加载实行自动加载。\n","slug":"how-to-prevent-repeating-send-ajax","published":1,"updated":"2016-05-13T11:11:33.396Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciozadwrc000bfcl1rxc3cbaw","content":"<blockquote>\n<p>作者：长天之云<br><a href=\"https://www.zhihu.com/question/19805411/answer/15465427\" target=\"_blank\" rel=\"external\">链接,知乎</a></p>\n</blockquote>\n<p>不推荐用外部变量锁定或修改按钮状态的方式，因为那样比较难：<br>要考虑并理解 success, complete, error, timeout 这些事件的区别，并注册正确的事件，一旦失误，功能将不再可用；<br>不可避免地比普通流程要要多注册一个 complete 事件；<br>恢复状态的代码很容易和不相干的代码混合在一起；</p>\n<p>我推荐用主动查询状态的方式（A、B，jQuery 为例）或工具函数的方式（C、D）来去除重复操作，并提供一些例子作为参考：</p>\n<h2 id=\"A-独占型提交\"><a href=\"#A-独占型提交\" class=\"headerlink\" title=\"A. 独占型提交\"></a>A. 独占型提交</h2><p>只允许同时存在一次提交操作，并且直到本次提交完成才能进行下一次提交。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.submit = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.promise_.state() === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.promise_ = $.post(<span class=\"string\">'/api/save'</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"B-贪婪型提交\"><a href=\"#B-贪婪型提交\" class=\"headerlink\" title=\"B. 贪婪型提交\"></a>B. 贪婪型提交</h2><p>无限制的提交，但是以最后一次操作为准；亦即需要尽快给出最后一次操作的反馈，而前面的操作结果并不重要。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.submit = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.promise_.state() === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.promise_.abort()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// todo</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>比如某些应用的条目中，有一些进行类似「喜欢」或「不喜欢」操作的二态按钮。如果按下后不立即给出反馈，用户的目光焦点就可能在那个按钮上停顿许久；如果按下时即时切换按钮的状态，再在程序上用 abort 来实现积极的提交，这样既能提高用户体验，还能降低服务器压力，皆大欢喜。</p>\n<hr>\n<h2 id=\"C-节制型提交\"><a href=\"#C-节制型提交\" class=\"headerlink\" title=\"C. 节制型提交\"></a>C. 节制型提交</h2><p>无论提交如何频繁，任意两次有效提交的间隔时间必定会大于或等于某一时间间隔；即以一定频率提交。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.submit = throttle(<span class=\"number\">150</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// todo</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>如果客户发送每隔100毫秒发送过来10次请求，此模块将只接收其中6个（每个在时间线上距离为150毫秒）进行处理。<br>这也是解决查询冲突的一种可选手段，比如以知乎草稿举例，仔细观察可以发现：<br>编辑器的 blur 事件会立即触发保存；<br>保存按钮的 click 事件也会立即触发保存；<br>但是存在一种情况会使这两个事件在数毫秒内连续发生——当焦点在编辑器内部，并且直接去点击保存按钮——这时用 throttle 来处理是可行的。<br>另外还有一些事件处理会很频繁地使用 throttle，如： resize、scroll、mousemove。</p>\n<hr>\n<h2 id=\"D-懒惰型提交\"><a href=\"#D-懒惰型提交\" class=\"headerlink\" title=\"D. 懒惰型提交\"></a>D. 懒惰型提交</h2><p>任意两次提交的间隔时间，必须大于一个指定时间，才会促成有效提交；即不给休息不干活。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.submit = debounce(<span class=\"number\">150</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// todo</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>还是以知乎草稿举例，当在编辑器内按下 ctrl + s 时，可以手动保存草稿；如果你连按，程序会表示不理解为什么你要连按，只有等你放弃连按，它才会继续。</p>\n<hr>\n<p>更多记忆中的例子</p>\n<p>方式 C 和 方式 D 有时更加通用，比如这些情况：<br>游戏中你捡到一把威力强大的高速武器，为了防止你的子弹在屏幕上打成一条直线，可以 throttle 来控制频率；<br>在弹幕型游戏里，为了防止你把射击键夹住来进行无脑游戏，可以用 debounce 来控制频率；<br>在编译任务里，守护进程监视了某一文件夹里所有的文件（如任一文件的改变都可以触发重新编译，一次执行就需要2秒），但某种操作能够瞬间造成大量文件改变（如 git checkout），这时一个简单的 debounce 可以使编译任务只执行一次。</p>\n<p>而方式 C 甚至可以和方式 B 组合使用，比如自动完成组件（Google 首页的搜索就是）：<br>当用户快速输入文本时（特别是打字能手），可以 throttle keypress 事件处理函数，以指定时间间隔来提取文本域的值，然后立即进行新的查询；<br>当新的查询需要发送，但上一个查询还没返回结果时，可以 abort 未完成的查询，并立即发送新查询；</p>\n<hr>\n<p>—– update 2013-01-08 —–</p>\n<h2 id=\"E-记忆型\"><a href=\"#E-记忆型\" class=\"headerlink\" title=\"E. 记忆型\"></a>E. 记忆型</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> scrape = memoize(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> $.post(<span class=\"string\">'/scraper'</span>, &#123; <span class=\"string\">'url'</span>: url &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>对于同样的参数，其返回始终结果是恒等的——每次都将返回同一对象。<br>应用例子有编辑器，如粘贴内容时抓取其中的链接信息，memoize 用以保证同样的链接不会抓取两次。</p>\n<hr>\n<p>—– update 2013-03-27 —–</p>\n<h2 id=\"F-累积型\"><a href=\"#F-累积型\" class=\"headerlink\" title=\"F. 累积型\"></a>F. 累积型</h2><p>前几天处理自动完成事件时得到这个函数，发现也可以用在处理连续事件上，它能够把连续的多次提交合并为一个提交，比如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> request = makePile(<span class=\"number\">5</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    $.post(<span class=\"string\">'/'</span>, &#123; list: <span class=\"built_in\">JSON</span>.stringify([].slice.call(<span class=\"built_in\">arguments</span>)) &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 连续发送五次</span></span><br><span class=\"line\">request(&#123;a:<span class=\"number\">1</span>&#125;), request(&#123;a:<span class=\"number\">2</span>&#125;), request(&#123;a:<span class=\"number\">3</span>&#125;), request(&#123;a:<span class=\"number\">4</span>&#125;), request(&#123;a:<span class=\"number\">5</span>&#125;)</span><br><span class=\"line\"><span class=\"comment\">/* post =&gt;</span><br><span class=\"line\">list:[&#123;\"a\":1&#125;,&#123;\"a\":2&#125;,&#123;\"a\":3&#125;,&#123;\"a\":4&#125;,&#123;\"a\":5&#125;]</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"comment\">// 样例实现：</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> makePile = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">count, onfilter, onvalue</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> values = [], id = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123; <span class=\"keyword\">return</span> value &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    values.push((onvalue || id).apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (values.length === count) &#123;</span><br><span class=\"line\">      onfilter.apply(<span class=\"keyword\">this</span>, values)</span><br><span class=\"line\">      values = []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>—– update 2013-04-16 —–<br>另一种累积是按时间而不是次数，比如应用在行为统计上，可能在瞬间收集到数十上百类似的行为，这时可以用上面 pile 的结构加上 debounce 来防止大批重复请求（但又不丢失任何统计）：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> trackFactory = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">delay, action</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> params = [], slice = [].slice</span><br><span class=\"line\">  <span class=\"keyword\">var</span> touch = debounce(delay, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (params.length) &#123;</span><br><span class=\"line\">      action(params)</span><br><span class=\"line\">      params = []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    params.push(slice.call(<span class=\"built_in\">arguments</span>))</span><br><span class=\"line\">    touch()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> track = trackFactory(<span class=\"number\">550</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">params</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// send tracking request</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"G-采样型\"><a href=\"#G-采样型\" class=\"headerlink\" title=\"G. 采样型\"></a>G. 采样型</h2><p>这是最近重构时联想到的，一种和上面都不同的去重操作，可以应用在自动加载（timeline）行为控制上：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">autoload.listen(feeds, <span class=\"string\">'next'</span>, sample(<span class=\"number\">3</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.enable()</span><br><span class=\"line\">&#125;))</span><br></pre></td></tr></table></figure></p>\n<p>如果 sample 是固化的选择函数（n 选 1），它这实际上会这样工作：<br>O-O-X-O-O-X</p>\n<p>但「自动加载」的应用可能想要的是（两次自动，一次手动）：<br>X-X-O-X-X-O</p>\n<p>对于这种情况，可以定义作为配置的选择函数来实现控制：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">options &#123; sample: (n) =&gt; n % 3 !== 0 &#125;</span><br></pre></td></tr></table></figure></p>\n<p>即每个下一次加载完成之后， 每三次有两次对下一次加载实行自动加载。</p>\n","excerpt":"","more":"<blockquote>\n<p>作者：长天之云<br><a href=\"https://www.zhihu.com/question/19805411/answer/15465427\">链接,知乎</a></p>\n</blockquote>\n<p>不推荐用外部变量锁定或修改按钮状态的方式，因为那样比较难：<br>要考虑并理解 success, complete, error, timeout 这些事件的区别，并注册正确的事件，一旦失误，功能将不再可用；<br>不可避免地比普通流程要要多注册一个 complete 事件；<br>恢复状态的代码很容易和不相干的代码混合在一起；</p>\n<p>我推荐用主动查询状态的方式（A、B，jQuery 为例）或工具函数的方式（C、D）来去除重复操作，并提供一些例子作为参考：</p>\n<h2 id=\"A-独占型提交\"><a href=\"#A-独占型提交\" class=\"headerlink\" title=\"A. 独占型提交\"></a>A. 独占型提交</h2><p>只允许同时存在一次提交操作，并且直到本次提交完成才能进行下一次提交。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.submit = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.promise_.state() === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.promise_ = $.post(<span class=\"string\">'/api/save'</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"B-贪婪型提交\"><a href=\"#B-贪婪型提交\" class=\"headerlink\" title=\"B. 贪婪型提交\"></a>B. 贪婪型提交</h2><p>无限制的提交，但是以最后一次操作为准；亦即需要尽快给出最后一次操作的反馈，而前面的操作结果并不重要。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.submit = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.promise_.state() === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.promise_.abort()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// todo</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>比如某些应用的条目中，有一些进行类似「喜欢」或「不喜欢」操作的二态按钮。如果按下后不立即给出反馈，用户的目光焦点就可能在那个按钮上停顿许久；如果按下时即时切换按钮的状态，再在程序上用 abort 来实现积极的提交，这样既能提高用户体验，还能降低服务器压力，皆大欢喜。</p>\n<hr>\n<h2 id=\"C-节制型提交\"><a href=\"#C-节制型提交\" class=\"headerlink\" title=\"C. 节制型提交\"></a>C. 节制型提交</h2><p>无论提交如何频繁，任意两次有效提交的间隔时间必定会大于或等于某一时间间隔；即以一定频率提交。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.submit = throttle(<span class=\"number\">150</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// todo</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>如果客户发送每隔100毫秒发送过来10次请求，此模块将只接收其中6个（每个在时间线上距离为150毫秒）进行处理。<br>这也是解决查询冲突的一种可选手段，比如以知乎草稿举例，仔细观察可以发现：<br>编辑器的 blur 事件会立即触发保存；<br>保存按钮的 click 事件也会立即触发保存；<br>但是存在一种情况会使这两个事件在数毫秒内连续发生——当焦点在编辑器内部，并且直接去点击保存按钮——这时用 throttle 来处理是可行的。<br>另外还有一些事件处理会很频繁地使用 throttle，如： resize、scroll、mousemove。</p>\n<hr>\n<h2 id=\"D-懒惰型提交\"><a href=\"#D-懒惰型提交\" class=\"headerlink\" title=\"D. 懒惰型提交\"></a>D. 懒惰型提交</h2><p>任意两次提交的间隔时间，必须大于一个指定时间，才会促成有效提交；即不给休息不干活。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.submit = debounce(<span class=\"number\">150</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// todo</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>还是以知乎草稿举例，当在编辑器内按下 ctrl + s 时，可以手动保存草稿；如果你连按，程序会表示不理解为什么你要连按，只有等你放弃连按，它才会继续。</p>\n<hr>\n<p>更多记忆中的例子</p>\n<p>方式 C 和 方式 D 有时更加通用，比如这些情况：<br>游戏中你捡到一把威力强大的高速武器，为了防止你的子弹在屏幕上打成一条直线，可以 throttle 来控制频率；<br>在弹幕型游戏里，为了防止你把射击键夹住来进行无脑游戏，可以用 debounce 来控制频率；<br>在编译任务里，守护进程监视了某一文件夹里所有的文件（如任一文件的改变都可以触发重新编译，一次执行就需要2秒），但某种操作能够瞬间造成大量文件改变（如 git checkout），这时一个简单的 debounce 可以使编译任务只执行一次。</p>\n<p>而方式 C 甚至可以和方式 B 组合使用，比如自动完成组件（Google 首页的搜索就是）：<br>当用户快速输入文本时（特别是打字能手），可以 throttle keypress 事件处理函数，以指定时间间隔来提取文本域的值，然后立即进行新的查询；<br>当新的查询需要发送，但上一个查询还没返回结果时，可以 abort 未完成的查询，并立即发送新查询；</p>\n<hr>\n<p>—– update 2013-01-08 —–</p>\n<h2 id=\"E-记忆型\"><a href=\"#E-记忆型\" class=\"headerlink\" title=\"E. 记忆型\"></a>E. 记忆型</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> scrape = memoize(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> $.post(<span class=\"string\">'/scraper'</span>, &#123; <span class=\"string\">'url'</span>: url &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>对于同样的参数，其返回始终结果是恒等的——每次都将返回同一对象。<br>应用例子有编辑器，如粘贴内容时抓取其中的链接信息，memoize 用以保证同样的链接不会抓取两次。</p>\n<hr>\n<p>—– update 2013-03-27 —–</p>\n<h2 id=\"F-累积型\"><a href=\"#F-累积型\" class=\"headerlink\" title=\"F. 累积型\"></a>F. 累积型</h2><p>前几天处理自动完成事件时得到这个函数，发现也可以用在处理连续事件上，它能够把连续的多次提交合并为一个提交，比如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> request = makePile(<span class=\"number\">5</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    $.post(<span class=\"string\">'/'</span>, &#123; list: <span class=\"built_in\">JSON</span>.stringify([].slice.call(<span class=\"built_in\">arguments</span>)) &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 连续发送五次</span></span><br><span class=\"line\">request(&#123;a:<span class=\"number\">1</span>&#125;), request(&#123;a:<span class=\"number\">2</span>&#125;), request(&#123;a:<span class=\"number\">3</span>&#125;), request(&#123;a:<span class=\"number\">4</span>&#125;), request(&#123;a:<span class=\"number\">5</span>&#125;)</span><br><span class=\"line\"><span class=\"comment\">/* post =&gt;</span><br><span class=\"line\">list:[&#123;\"a\":1&#125;,&#123;\"a\":2&#125;,&#123;\"a\":3&#125;,&#123;\"a\":4&#125;,&#123;\"a\":5&#125;]</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"comment\">// 样例实现：</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> makePile = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">count, onfilter, onvalue</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> values = [], id = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123; <span class=\"keyword\">return</span> value &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    values.push((onvalue || id).apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (values.length === count) &#123;</span><br><span class=\"line\">      onfilter.apply(<span class=\"keyword\">this</span>, values)</span><br><span class=\"line\">      values = []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>—– update 2013-04-16 —–<br>另一种累积是按时间而不是次数，比如应用在行为统计上，可能在瞬间收集到数十上百类似的行为，这时可以用上面 pile 的结构加上 debounce 来防止大批重复请求（但又不丢失任何统计）：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> trackFactory = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">delay, action</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> params = [], slice = [].slice</span><br><span class=\"line\">  <span class=\"keyword\">var</span> touch = debounce(delay, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (params.length) &#123;</span><br><span class=\"line\">      action(params)</span><br><span class=\"line\">      params = []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    params.push(slice.call(<span class=\"built_in\">arguments</span>))</span><br><span class=\"line\">    touch()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> track = trackFactory(<span class=\"number\">550</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">params</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// send tracking request</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"G-采样型\"><a href=\"#G-采样型\" class=\"headerlink\" title=\"G. 采样型\"></a>G. 采样型</h2><p>这是最近重构时联想到的，一种和上面都不同的去重操作，可以应用在自动加载（timeline）行为控制上：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">autoload.listen(feeds, <span class=\"string\">'next'</span>, sample(<span class=\"number\">3</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.enable()</span><br><span class=\"line\">&#125;))</span><br></pre></td></tr></table></figure></p>\n<p>如果 sample 是固化的选择函数（n 选 1），它这实际上会这样工作：<br>O-O-X-O-O-X</p>\n<p>但「自动加载」的应用可能想要的是（两次自动，一次手动）：<br>X-X-O-X-X-O</p>\n<p>对于这种情况，可以定义作为配置的选择函数来实现控制：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">options &#123; sample: (n) =&gt; n % 3 !== 0 &#125;</span><br></pre></td></tr></table></figure></p>\n<p>即每个下一次加载完成之后， 每三次有两次对下一次加载实行自动加载。</p>\n"},{"layout":"n","title":"如何重学编程？","date":"2016-05-11T06:45:49.000Z","_content":"\n## 如何重学编程？\n[知乎：你会如何学习编程](https://www.zhihu.com/question/31862619/answer/56813249)\n\n**2016书目：**\n\n- 初级：科普与入门\n- [x] [《编码(豆瓣)》](https://link.zhihu.com/?target=http%3A//book.douban.com/subject/4822685/)\n- [x] [《计算机科学概论（第11版）(豆瓣)》](https://link.zhihu.com/?target=http%3A//book.douban.com/subject/6862061/)\n- [ ] [《逻辑的引擎(豆瓣)》](https://link.zhihu.com/?target=http%3A//book.douban.com/subject/1391740/)\n- [ ] [《什么是数学(豆瓣)》](https://link.zhihu.com/?target=http%3A//book.douban.com/subject/10455982/)\n- [ ] [《C Primer Plus(豆瓣)》](https://link.zhihu.com/?target=http%3A//book.douban.com/subject/1240002/)\n- [ ] [《Head First HTML与CSS、XHTML（中文版） (豆瓣)》](https://link.zhihu.com/?target=http%3A//book.douban.com/subject/3040870/)\n\n- 进阶：理论与实践\n- [ ] [《深入理解计算机系统（原书第2版） (豆瓣)》](https://link.zhihu.com/?target=http%3A//book.douban.com/subject/5333562/)\n- [ ] [《微积分之屠龙宝刀 (豆瓣)》](https://link.zhihu.com/?target=http%3A//book.douban.com/subject/1169472/)\n- [ ] [《高等代数简明教程（上册） (豆瓣)》](https://link.zhihu.com/?target=http%3A//book.douban.com/subject/1231162/)\n- [ ] [《概率论与数理统计 (豆瓣)》](https://link.zhihu.com/?target=http%3A//book.douban.com/subject/2201479/)\n- [ ] [《离散数学及其应用（原书第5版） (豆瓣)》](https://link.zhihu.com/?target=http%3A//book.douban.com/subject/2130743/)\n- [ ] [《算法 (豆瓣)》](https://link.zhihu.com/?target=http%3A//book.douban.com/subject/10432347/)\n\n- 高级：融汇与贯通\n- [ ] [《Ruby元编程 (豆瓣)》](https://link.zhihu.com/?target=http%3A//book.douban.com/subject/7056800/)\n- [ ] [《疯狂Java讲义 (豆瓣)》](https://link.zhihu.com/?target=http%3A//book.douban.com/subject/3246499/)\n- [ ] [《代码大全（第2版） (豆瓣)》](https://link.zhihu.com/?target=http%3A//book.douban.com/subject/1477390/)\n- [ ] [《计算理论导引 (豆瓣)》](https://link.zhihu.com/?target=http%3A//book.douban.com/subject/1852515/)\n- [ ] [《计算机程序的构造和解释 (豆瓣)》](https://link.zhihu.com/?target=http%3A//book.douban.com/subject/1148282/)\n- [ ] [《程序设计实践 (豆瓣)》](https://link.zhihu.com/?target=http%3A//book.douban.com/subject/1173548/)\n- [ ] [《程序员修炼之道 (豆瓣)》](https://link.zhihu.com/?target=http%3A//book.douban.com/subject/1152111/)\n","source":"_posts/how-to-restudy-programming.md","raw":"layout: 'n'\ntitle: 如何重学编程？\ndate: 2016-05-11 14:45:49\ntags: [others]\n---\n\n## 如何重学编程？\n[知乎：你会如何学习编程](https://www.zhihu.com/question/31862619/answer/56813249)\n\n**2016书目：**\n\n- 初级：科普与入门\n- [x] [《编码(豆瓣)》](https://link.zhihu.com/?target=http%3A//book.douban.com/subject/4822685/)\n- [x] [《计算机科学概论（第11版）(豆瓣)》](https://link.zhihu.com/?target=http%3A//book.douban.com/subject/6862061/)\n- [ ] [《逻辑的引擎(豆瓣)》](https://link.zhihu.com/?target=http%3A//book.douban.com/subject/1391740/)\n- [ ] [《什么是数学(豆瓣)》](https://link.zhihu.com/?target=http%3A//book.douban.com/subject/10455982/)\n- [ ] [《C Primer Plus(豆瓣)》](https://link.zhihu.com/?target=http%3A//book.douban.com/subject/1240002/)\n- [ ] [《Head First HTML与CSS、XHTML（中文版） (豆瓣)》](https://link.zhihu.com/?target=http%3A//book.douban.com/subject/3040870/)\n\n- 进阶：理论与实践\n- [ ] [《深入理解计算机系统（原书第2版） (豆瓣)》](https://link.zhihu.com/?target=http%3A//book.douban.com/subject/5333562/)\n- [ ] [《微积分之屠龙宝刀 (豆瓣)》](https://link.zhihu.com/?target=http%3A//book.douban.com/subject/1169472/)\n- [ ] [《高等代数简明教程（上册） (豆瓣)》](https://link.zhihu.com/?target=http%3A//book.douban.com/subject/1231162/)\n- [ ] [《概率论与数理统计 (豆瓣)》](https://link.zhihu.com/?target=http%3A//book.douban.com/subject/2201479/)\n- [ ] [《离散数学及其应用（原书第5版） (豆瓣)》](https://link.zhihu.com/?target=http%3A//book.douban.com/subject/2130743/)\n- [ ] [《算法 (豆瓣)》](https://link.zhihu.com/?target=http%3A//book.douban.com/subject/10432347/)\n\n- 高级：融汇与贯通\n- [ ] [《Ruby元编程 (豆瓣)》](https://link.zhihu.com/?target=http%3A//book.douban.com/subject/7056800/)\n- [ ] [《疯狂Java讲义 (豆瓣)》](https://link.zhihu.com/?target=http%3A//book.douban.com/subject/3246499/)\n- [ ] [《代码大全（第2版） (豆瓣)》](https://link.zhihu.com/?target=http%3A//book.douban.com/subject/1477390/)\n- [ ] [《计算理论导引 (豆瓣)》](https://link.zhihu.com/?target=http%3A//book.douban.com/subject/1852515/)\n- [ ] [《计算机程序的构造和解释 (豆瓣)》](https://link.zhihu.com/?target=http%3A//book.douban.com/subject/1148282/)\n- [ ] [《程序设计实践 (豆瓣)》](https://link.zhihu.com/?target=http%3A//book.douban.com/subject/1173548/)\n- [ ] [《程序员修炼之道 (豆瓣)》](https://link.zhihu.com/?target=http%3A//book.douban.com/subject/1152111/)\n","slug":"how-to-restudy-programming","published":1,"updated":"2016-05-13T11:11:33.397Z","comments":1,"photos":[],"link":"","_id":"ciozadwri000cfcl17nyi28r3","content":"<h2 id=\"如何重学编程？\"><a href=\"#如何重学编程？\" class=\"headerlink\" title=\"如何重学编程？\"></a>如何重学编程？</h2><p><a href=\"https://www.zhihu.com/question/31862619/answer/56813249\" target=\"_blank\" rel=\"external\">知乎：你会如何学习编程</a></p>\n<p><strong>2016书目：</strong></p>\n<ul>\n<li>初级：科普与入门</li>\n<li>[x] <a href=\"https://link.zhihu.com/?target=http%3A//book.douban.com/subject/4822685/\" target=\"_blank\" rel=\"external\">《编码(豆瓣)》</a></li>\n<li>[x] <a href=\"https://link.zhihu.com/?target=http%3A//book.douban.com/subject/6862061/\" target=\"_blank\" rel=\"external\">《计算机科学概论（第11版）(豆瓣)》</a></li>\n<li>[ ] <a href=\"https://link.zhihu.com/?target=http%3A//book.douban.com/subject/1391740/\" target=\"_blank\" rel=\"external\">《逻辑的引擎(豆瓣)》</a></li>\n<li>[ ] <a href=\"https://link.zhihu.com/?target=http%3A//book.douban.com/subject/10455982/\" target=\"_blank\" rel=\"external\">《什么是数学(豆瓣)》</a></li>\n<li>[ ] <a href=\"https://link.zhihu.com/?target=http%3A//book.douban.com/subject/1240002/\" target=\"_blank\" rel=\"external\">《C Primer Plus(豆瓣)》</a></li>\n<li><p>[ ] <a href=\"https://link.zhihu.com/?target=http%3A//book.douban.com/subject/3040870/\" target=\"_blank\" rel=\"external\">《Head First HTML与CSS、XHTML（中文版） (豆瓣)》</a></p>\n</li>\n<li><p>进阶：理论与实践</p>\n</li>\n<li>[ ] <a href=\"https://link.zhihu.com/?target=http%3A//book.douban.com/subject/5333562/\" target=\"_blank\" rel=\"external\">《深入理解计算机系统（原书第2版） (豆瓣)》</a></li>\n<li>[ ] <a href=\"https://link.zhihu.com/?target=http%3A//book.douban.com/subject/1169472/\" target=\"_blank\" rel=\"external\">《微积分之屠龙宝刀 (豆瓣)》</a></li>\n<li>[ ] <a href=\"https://link.zhihu.com/?target=http%3A//book.douban.com/subject/1231162/\" target=\"_blank\" rel=\"external\">《高等代数简明教程（上册） (豆瓣)》</a></li>\n<li>[ ] <a href=\"https://link.zhihu.com/?target=http%3A//book.douban.com/subject/2201479/\" target=\"_blank\" rel=\"external\">《概率论与数理统计 (豆瓣)》</a></li>\n<li>[ ] <a href=\"https://link.zhihu.com/?target=http%3A//book.douban.com/subject/2130743/\" target=\"_blank\" rel=\"external\">《离散数学及其应用（原书第5版） (豆瓣)》</a></li>\n<li><p>[ ] <a href=\"https://link.zhihu.com/?target=http%3A//book.douban.com/subject/10432347/\" target=\"_blank\" rel=\"external\">《算法 (豆瓣)》</a></p>\n</li>\n<li><p>高级：融汇与贯通</p>\n</li>\n<li>[ ] <a href=\"https://link.zhihu.com/?target=http%3A//book.douban.com/subject/7056800/\" target=\"_blank\" rel=\"external\">《Ruby元编程 (豆瓣)》</a></li>\n<li>[ ] <a href=\"https://link.zhihu.com/?target=http%3A//book.douban.com/subject/3246499/\" target=\"_blank\" rel=\"external\">《疯狂Java讲义 (豆瓣)》</a></li>\n<li>[ ] <a href=\"https://link.zhihu.com/?target=http%3A//book.douban.com/subject/1477390/\" target=\"_blank\" rel=\"external\">《代码大全（第2版） (豆瓣)》</a></li>\n<li>[ ] <a href=\"https://link.zhihu.com/?target=http%3A//book.douban.com/subject/1852515/\" target=\"_blank\" rel=\"external\">《计算理论导引 (豆瓣)》</a></li>\n<li>[ ] <a href=\"https://link.zhihu.com/?target=http%3A//book.douban.com/subject/1148282/\" target=\"_blank\" rel=\"external\">《计算机程序的构造和解释 (豆瓣)》</a></li>\n<li>[ ] <a href=\"https://link.zhihu.com/?target=http%3A//book.douban.com/subject/1173548/\" target=\"_blank\" rel=\"external\">《程序设计实践 (豆瓣)》</a></li>\n<li>[ ] <a href=\"https://link.zhihu.com/?target=http%3A//book.douban.com/subject/1152111/\" target=\"_blank\" rel=\"external\">《程序员修炼之道 (豆瓣)》</a></li>\n</ul>\n","excerpt":"","more":"<h2 id=\"如何重学编程？\"><a href=\"#如何重学编程？\" class=\"headerlink\" title=\"如何重学编程？\"></a>如何重学编程？</h2><p><a href=\"https://www.zhihu.com/question/31862619/answer/56813249\">知乎：你会如何学习编程</a></p>\n<p><strong>2016书目：</strong></p>\n<ul>\n<li>初级：科普与入门</li>\n<li>[x] <a href=\"https://link.zhihu.com/?target=http%3A//book.douban.com/subject/4822685/\">《编码(豆瓣)》</a></li>\n<li>[x] <a href=\"https://link.zhihu.com/?target=http%3A//book.douban.com/subject/6862061/\">《计算机科学概论（第11版）(豆瓣)》</a></li>\n<li>[ ] <a href=\"https://link.zhihu.com/?target=http%3A//book.douban.com/subject/1391740/\">《逻辑的引擎(豆瓣)》</a></li>\n<li>[ ] <a href=\"https://link.zhihu.com/?target=http%3A//book.douban.com/subject/10455982/\">《什么是数学(豆瓣)》</a></li>\n<li>[ ] <a href=\"https://link.zhihu.com/?target=http%3A//book.douban.com/subject/1240002/\">《C Primer Plus(豆瓣)》</a></li>\n<li><p>[ ] <a href=\"https://link.zhihu.com/?target=http%3A//book.douban.com/subject/3040870/\">《Head First HTML与CSS、XHTML（中文版） (豆瓣)》</a></p>\n</li>\n<li><p>进阶：理论与实践</p>\n</li>\n<li>[ ] <a href=\"https://link.zhihu.com/?target=http%3A//book.douban.com/subject/5333562/\">《深入理解计算机系统（原书第2版） (豆瓣)》</a></li>\n<li>[ ] <a href=\"https://link.zhihu.com/?target=http%3A//book.douban.com/subject/1169472/\">《微积分之屠龙宝刀 (豆瓣)》</a></li>\n<li>[ ] <a href=\"https://link.zhihu.com/?target=http%3A//book.douban.com/subject/1231162/\">《高等代数简明教程（上册） (豆瓣)》</a></li>\n<li>[ ] <a href=\"https://link.zhihu.com/?target=http%3A//book.douban.com/subject/2201479/\">《概率论与数理统计 (豆瓣)》</a></li>\n<li>[ ] <a href=\"https://link.zhihu.com/?target=http%3A//book.douban.com/subject/2130743/\">《离散数学及其应用（原书第5版） (豆瓣)》</a></li>\n<li><p>[ ] <a href=\"https://link.zhihu.com/?target=http%3A//book.douban.com/subject/10432347/\">《算法 (豆瓣)》</a></p>\n</li>\n<li><p>高级：融汇与贯通</p>\n</li>\n<li>[ ] <a href=\"https://link.zhihu.com/?target=http%3A//book.douban.com/subject/7056800/\">《Ruby元编程 (豆瓣)》</a></li>\n<li>[ ] <a href=\"https://link.zhihu.com/?target=http%3A//book.douban.com/subject/3246499/\">《疯狂Java讲义 (豆瓣)》</a></li>\n<li>[ ] <a href=\"https://link.zhihu.com/?target=http%3A//book.douban.com/subject/1477390/\">《代码大全（第2版） (豆瓣)》</a></li>\n<li>[ ] <a href=\"https://link.zhihu.com/?target=http%3A//book.douban.com/subject/1852515/\">《计算理论导引 (豆瓣)》</a></li>\n<li>[ ] <a href=\"https://link.zhihu.com/?target=http%3A//book.douban.com/subject/1148282/\">《计算机程序的构造和解释 (豆瓣)》</a></li>\n<li>[ ] <a href=\"https://link.zhihu.com/?target=http%3A//book.douban.com/subject/1173548/\">《程序设计实践 (豆瓣)》</a></li>\n<li>[ ] <a href=\"https://link.zhihu.com/?target=http%3A//book.douban.com/subject/1152111/\">《程序员修炼之道 (豆瓣)》</a></li>\n</ul>\n"},{"title":"line-height&vertical","date":"2016-05-11T07:02:41.000Z","_content":"## line-height\n[w3c标准](http://devdocs.io/css/line-height)\n\n1. line-height确定line-box的高度\n2. 同一行内，各line元素的line-height共同确定该行的line-boxes的高度\n3. block元素没有定高度，由block元素内的block元素和inline元素共同确定该元素的高度。\n\n```javascript\n<div style=\"line-height:1.5; border:1px solid #34538b;font-size: 16px;\">\n    <span style=\"font-size:60px; border:1px solid #a0b3d6; vertical-align: baseline; line-height: 100px;\">大大的文字</span>\n    后面是静止的文字。\n</div>\n```\n\n## vertical-align\n[w3c标准](http://devdocs.io/css/vertical-align)\n元素内vertical对齐顺序，分为两类：  \n1. 非top,bottom对齐方式，根据行内框高度，行内文字来进行对齐。\n2. 对齐后，取top,bottom对齐元素的最大值的元素，来对齐以确定该元素的行框的top或bottom。之后再分别对齐。\n\n## vertical-algin & line-height\n[w3c标准](http://www.zhangxinxu.com/wordpress/2015/08/css-deep-understand-vertical-align-and-line-height/)\n","source":"_posts/line-height-vertical.md","raw":"---\ntitle: line-height&vertical\ndate: 2016-05-11 15:02:41\ntags: css\n---\n## line-height\n[w3c标准](http://devdocs.io/css/line-height)\n\n1. line-height确定line-box的高度\n2. 同一行内，各line元素的line-height共同确定该行的line-boxes的高度\n3. block元素没有定高度，由block元素内的block元素和inline元素共同确定该元素的高度。\n\n```javascript\n<div style=\"line-height:1.5; border:1px solid #34538b;font-size: 16px;\">\n    <span style=\"font-size:60px; border:1px solid #a0b3d6; vertical-align: baseline; line-height: 100px;\">大大的文字</span>\n    后面是静止的文字。\n</div>\n```\n\n## vertical-align\n[w3c标准](http://devdocs.io/css/vertical-align)\n元素内vertical对齐顺序，分为两类：  \n1. 非top,bottom对齐方式，根据行内框高度，行内文字来进行对齐。\n2. 对齐后，取top,bottom对齐元素的最大值的元素，来对齐以确定该元素的行框的top或bottom。之后再分别对齐。\n\n## vertical-algin & line-height\n[w3c标准](http://www.zhangxinxu.com/wordpress/2015/08/css-deep-understand-vertical-align-and-line-height/)\n","slug":"line-height-vertical","published":1,"updated":"2016-05-17T06:20:11.702Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciozadwrl000ffcl1ohgx50r6","content":"<h2 id=\"line-height\"><a href=\"#line-height\" class=\"headerlink\" title=\"line-height\"></a>line-height</h2><p><a href=\"http://devdocs.io/css/line-height\" target=\"_blank\" rel=\"external\">w3c标准</a></p>\n<ol>\n<li>line-height确定line-box的高度</li>\n<li>同一行内，各line元素的line-height共同确定该行的line-boxes的高度</li>\n<li>block元素没有定高度，由block元素内的block元素和inline元素共同确定该元素的高度。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div style=<span class=\"string\">\"line-height:1.5; border:1px solid #34538b;font-size: 16px;\"</span>&gt;</span><br><span class=\"line\">    &lt;span style=\"font-size:60px; border:1px solid #a0b3d6; vertical-align: baseline; line-height: 100px;\"&gt;大大的文字&lt;/span&gt;</span><br><span class=\"line\">    后面是静止的文字。</span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"vertical-align\"><a href=\"#vertical-align\" class=\"headerlink\" title=\"vertical-align\"></a>vertical-align</h2><p><a href=\"http://devdocs.io/css/vertical-align\" target=\"_blank\" rel=\"external\">w3c标准</a><br>元素内vertical对齐顺序，分为两类：  </p>\n<ol>\n<li>非top,bottom对齐方式，根据行内框高度，行内文字来进行对齐。</li>\n<li>对齐后，取top,bottom对齐元素的最大值的元素，来对齐以确定该元素的行框的top或bottom。之后再分别对齐。</li>\n</ol>\n<h2 id=\"vertical-algin-amp-line-height\"><a href=\"#vertical-algin-amp-line-height\" class=\"headerlink\" title=\"vertical-algin &amp; line-height\"></a>vertical-algin &amp; line-height</h2><p><a href=\"http://www.zhangxinxu.com/wordpress/2015/08/css-deep-understand-vertical-align-and-line-height/\" target=\"_blank\" rel=\"external\">w3c标准</a></p>\n","excerpt":"","more":"<h2 id=\"line-height\"><a href=\"#line-height\" class=\"headerlink\" title=\"line-height\"></a>line-height</h2><p><a href=\"http://devdocs.io/css/line-height\">w3c标准</a></p>\n<ol>\n<li>line-height确定line-box的高度</li>\n<li>同一行内，各line元素的line-height共同确定该行的line-boxes的高度</li>\n<li>block元素没有定高度，由block元素内的block元素和inline元素共同确定该元素的高度。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div style=<span class=\"string\">\"line-height:1.5; border:1px solid #34538b;font-size: 16px;\"</span>&gt;</span><br><span class=\"line\">    &lt;span style=\"font-size:60px; border:1px solid #a0b3d6; vertical-align: baseline; line-height: 100px;\"&gt;大大的文字&lt;/span&gt;</span><br><span class=\"line\">    后面是静止的文字。</span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"vertical-align\"><a href=\"#vertical-align\" class=\"headerlink\" title=\"vertical-align\"></a>vertical-align</h2><p><a href=\"http://devdocs.io/css/vertical-align\">w3c标准</a><br>元素内vertical对齐顺序，分为两类：  </p>\n<ol>\n<li>非top,bottom对齐方式，根据行内框高度，行内文字来进行对齐。</li>\n<li>对齐后，取top,bottom对齐元素的最大值的元素，来对齐以确定该元素的行框的top或bottom。之后再分别对齐。</li>\n</ol>\n<h2 id=\"vertical-algin-amp-line-height\"><a href=\"#vertical-algin-amp-line-height\" class=\"headerlink\" title=\"vertical-algin &amp; line-height\"></a>vertical-algin &amp; line-height</h2><p><a href=\"http://www.zhangxinxu.com/wordpress/2015/08/css-deep-understand-vertical-align-and-line-height/\">w3c标准</a></p>\n"},{"title":"React入门","date":"2016-05-11T06:57:43.000Z","_content":"\n## React\n\n### React.createClass()\n```\nvar NewClass = React.createClass({\n\n  getDefaultProps: function(){\n    return: {\n      prop1: \"a\",\n      prop2: \"b\"\n    }\n  },\n  getInitialState: function(){\n    return {\n      data: {}\n    }\n  },\n  render: function(){\n\n  },\n  componentDidMount: function(){\n    return (\n      <div className=\"newClass\">\n        hello {this.props.name}!\n      </div>\n    )\n  }\n})\n```\n### ReactDOM.render()\n```\nReactDOM.render(\n  <NewClass name=\"galen\" />,\n  document.getElementById(\"example\")\n)\n```\n\n### 顶层方法\n```\nReact.PropType.Array.isRequired\n\npropTypes: {\n    name: React.PropTypes.Array.isRequired\n}\n```\n> 参见Reuseable Component Prop Validation\n\n```\nReact.findDOMNode(this.refs.xxx)\nthis.refs.xxx.getDOMNode()\n```\n### 双向数据绑定\n```\nmixin: [Reat.addons.LinkStateMixin]\n\nvalueLink={this.linkState(\"xxxx\")}\ncheckedLink={this.linkState(\"xxxx\")}\n```\n> valueLink之后可以被props传递\n\n### 组件生命周期\n\n```\ngetDefaultProps: function(){\n    return {\n\n    }\n},\ngetInitialState: function(){\n    return {\n\n    }\n},\ncomponentWillMount: function(){\n\n},\ncomponentDidMount: function(){\n\n},\nshouldComponentUpdate: function(nextProp, nextState){\n\n},\ncomponentWillUpdate: function(){\n\n},\ncomponentDidUpdate: function(){\n\n},\ncomponentWillReceiceProps: function(){\n\n}\n\n\nunmountComponentAtNode(this)\n```\n","source":"_posts/react-getting-start.md","raw":"---\ntitle: React入门\ndate: 2016-05-11 14:57:43\ntags: [javascript,react]\n---\n\n## React\n\n### React.createClass()\n```\nvar NewClass = React.createClass({\n\n  getDefaultProps: function(){\n    return: {\n      prop1: \"a\",\n      prop2: \"b\"\n    }\n  },\n  getInitialState: function(){\n    return {\n      data: {}\n    }\n  },\n  render: function(){\n\n  },\n  componentDidMount: function(){\n    return (\n      <div className=\"newClass\">\n        hello {this.props.name}!\n      </div>\n    )\n  }\n})\n```\n### ReactDOM.render()\n```\nReactDOM.render(\n  <NewClass name=\"galen\" />,\n  document.getElementById(\"example\")\n)\n```\n\n### 顶层方法\n```\nReact.PropType.Array.isRequired\n\npropTypes: {\n    name: React.PropTypes.Array.isRequired\n}\n```\n> 参见Reuseable Component Prop Validation\n\n```\nReact.findDOMNode(this.refs.xxx)\nthis.refs.xxx.getDOMNode()\n```\n### 双向数据绑定\n```\nmixin: [Reat.addons.LinkStateMixin]\n\nvalueLink={this.linkState(\"xxxx\")}\ncheckedLink={this.linkState(\"xxxx\")}\n```\n> valueLink之后可以被props传递\n\n### 组件生命周期\n\n```\ngetDefaultProps: function(){\n    return {\n\n    }\n},\ngetInitialState: function(){\n    return {\n\n    }\n},\ncomponentWillMount: function(){\n\n},\ncomponentDidMount: function(){\n\n},\nshouldComponentUpdate: function(nextProp, nextState){\n\n},\ncomponentWillUpdate: function(){\n\n},\ncomponentDidUpdate: function(){\n\n},\ncomponentWillReceiceProps: function(){\n\n}\n\n\nunmountComponentAtNode(this)\n```\n","slug":"react-getting-start","published":1,"updated":"2016-05-13T11:11:33.397Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciozadwro000hfcl121u64nha","content":"<h2 id=\"React\"><a href=\"#React\" class=\"headerlink\" title=\"React\"></a>React</h2><h3 id=\"React-createClass\"><a href=\"#React-createClass\" class=\"headerlink\" title=\"React.createClass()\"></a>React.createClass()</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var NewClass = React.createClass(&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  getDefaultProps: function()&#123;</span><br><span class=\"line\">    return: &#123;</span><br><span class=\"line\">      prop1: &quot;a&quot;,</span><br><span class=\"line\">      prop2: &quot;b&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  getInitialState: function()&#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      data: &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  render: function()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  componentDidMount: function()&#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;div className=&quot;newClass&quot;&gt;</span><br><span class=\"line\">        hello &#123;this.props.name&#125;!</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"ReactDOM-render\"><a href=\"#ReactDOM-render\" class=\"headerlink\" title=\"ReactDOM.render()\"></a>ReactDOM.render()</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;NewClass name=&quot;galen&quot; /&gt;,</span><br><span class=\"line\">  document.getElementById(&quot;example&quot;)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h3 id=\"顶层方法\"><a href=\"#顶层方法\" class=\"headerlink\" title=\"顶层方法\"></a>顶层方法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">React.PropType.Array.isRequired</span><br><span class=\"line\"></span><br><span class=\"line\">propTypes: &#123;</span><br><span class=\"line\">    name: React.PropTypes.Array.isRequired</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>参见Reuseable Component Prop Validation</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">React.findDOMNode(this.refs.xxx)</span><br><span class=\"line\">this.refs.xxx.getDOMNode()</span><br></pre></td></tr></table></figure>\n<h3 id=\"双向数据绑定\"><a href=\"#双向数据绑定\" class=\"headerlink\" title=\"双向数据绑定\"></a>双向数据绑定</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mixin: [Reat.addons.LinkStateMixin]</span><br><span class=\"line\"></span><br><span class=\"line\">valueLink=&#123;this.linkState(&quot;xxxx&quot;)&#125;</span><br><span class=\"line\">checkedLink=&#123;this.linkState(&quot;xxxx&quot;)&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>valueLink之后可以被props传递</p>\n</blockquote>\n<h3 id=\"组件生命周期\"><a href=\"#组件生命周期\" class=\"headerlink\" title=\"组件生命周期\"></a>组件生命周期</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getDefaultProps: function()&#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">getInitialState: function()&#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">componentWillMount: function()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">componentDidMount: function()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">shouldComponentUpdate: function(nextProp, nextState)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">componentWillUpdate: function()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">componentDidUpdate: function()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">componentWillReceiceProps: function()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">unmountComponentAtNode(this)</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"React\"><a href=\"#React\" class=\"headerlink\" title=\"React\"></a>React</h2><h3 id=\"React-createClass\"><a href=\"#React-createClass\" class=\"headerlink\" title=\"React.createClass()\"></a>React.createClass()</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var NewClass = React.createClass(&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  getDefaultProps: function()&#123;</span><br><span class=\"line\">    return: &#123;</span><br><span class=\"line\">      prop1: &quot;a&quot;,</span><br><span class=\"line\">      prop2: &quot;b&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  getInitialState: function()&#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      data: &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  render: function()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  componentDidMount: function()&#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;div className=&quot;newClass&quot;&gt;</span><br><span class=\"line\">        hello &#123;this.props.name&#125;!</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"ReactDOM-render\"><a href=\"#ReactDOM-render\" class=\"headerlink\" title=\"ReactDOM.render()\"></a>ReactDOM.render()</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;NewClass name=&quot;galen&quot; /&gt;,</span><br><span class=\"line\">  document.getElementById(&quot;example&quot;)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h3 id=\"顶层方法\"><a href=\"#顶层方法\" class=\"headerlink\" title=\"顶层方法\"></a>顶层方法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">React.PropType.Array.isRequired</span><br><span class=\"line\"></span><br><span class=\"line\">propTypes: &#123;</span><br><span class=\"line\">    name: React.PropTypes.Array.isRequired</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>参见Reuseable Component Prop Validation</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">React.findDOMNode(this.refs.xxx)</span><br><span class=\"line\">this.refs.xxx.getDOMNode()</span><br></pre></td></tr></table></figure>\n<h3 id=\"双向数据绑定\"><a href=\"#双向数据绑定\" class=\"headerlink\" title=\"双向数据绑定\"></a>双向数据绑定</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mixin: [Reat.addons.LinkStateMixin]</span><br><span class=\"line\"></span><br><span class=\"line\">valueLink=&#123;this.linkState(&quot;xxxx&quot;)&#125;</span><br><span class=\"line\">checkedLink=&#123;this.linkState(&quot;xxxx&quot;)&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>valueLink之后可以被props传递</p>\n</blockquote>\n<h3 id=\"组件生命周期\"><a href=\"#组件生命周期\" class=\"headerlink\" title=\"组件生命周期\"></a>组件生命周期</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getDefaultProps: function()&#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">getInitialState: function()&#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">componentWillMount: function()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">componentDidMount: function()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">shouldComponentUpdate: function(nextProp, nextState)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">componentWillUpdate: function()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">componentDidUpdate: function()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">componentWillReceiceProps: function()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">unmountComponentAtNode(this)</span><br></pre></td></tr></table></figure>\n"},{"title":"javascript中的this","date":"2016-06-03T04:25:58.000Z","_content":"\n\n## javascript中的this\n\n\n### 先来看个例子  \n\n```javascript\nvar name = \"Bob\";\nvar nameObj ={\n    name : \"Tom\",\n    showName : function(){\n        alert(this.name);\n    },\n    waitShowName : function(){\n        setTimeout(this.showName, 1000); // bob\n        // setTimeout(function(){ //tom\n        //     nameObj.showName()\n        // }, 1000);\n  }\n};\nnameObj.waitShowName();\n```\n\n\n一般而言，在Javascript中，this指向函数**执行时**的当前对象\n\n> The this keyword is relative to the execution context, not the declaration context.\n\n\n\n* 当没有明确的执行时的当前对象时，this指向全局对象window。  \n\n```javascript\n            var obj = {\n                 bar: \"bar\",\n                 foo: function(){\n                     console.log(this);\n                 }\n             };\n             obj.foo(); //obj\n             var bar = obj.foo;\n             bar() //window\n```\n\n\n\n* 在浏览器中setTimeout、setInterval和匿名函数执行时的当前对象通常是是全局对象window，当然也有例外  \n\n```javascript\n\n\n    foo(function (){\n        console.log(this)\n    });\n\n\n\n    el.addEventListener('click', bar, false);\n\n\n\n\n    function foo(fn){   //this绑定为el\n            fn.call({});\n    }\n```\n\n\n\n* eval函数 指向当前执行环境  \n\n```javascript\nvar name = \"window\";\n\nvar Bob = {\n    name: \"Bob\",\n    showName: function(){\n        eval(\"alert(this.name)\");\n    }\n};\n\nBob.showName();    //Bob\n```\n\n\n当然还有很多很多例子，\n涉及 new     还有es5中的 call,apply,bind,  以及es6中的() => {}\n\n```javascript\n\nvar obj = {\n    foo: function() {\n        setTimeout(function(){\n            console.log(this)  //直接绑定this obj\n        }.bind(this))\n    }\n}\n\nobj.foo();\n\n\nvar obj = {\n    foo: function() {\n        setTimeout(() => {\n            console.log(this)  //直接绑定this obj\n        })\n    }\n}\n\nobj.foo();\n\nvar obj = {\n    foo: () => {\n        setTimeout(() => {\n            console.log(this)  //直接绑定this window\n        })\n    }\n}\n\nobj.foo(); //window\n\n```\n\n\n\n\nlambda表达式：  \n\n> 要计算x的平方加2  \n\n```javascript\n(λx.x*x)(λx.x+2)\n```   \n\n假如用js来写  \n\n\n```javascript\n(function(x){ retrun x + 2; })((function(x){ return x*x })(N))\n\n```  \n\n\nes6可以写成  \n```javascript\n(x => x + 2)((x => x * x)(N))\n```  \n\n不一一列举了。\n","source":"_posts/this.md","raw":"---\ntitle: javascript中的this\ndate: 2016-06-03 12:25:58\ntags: [javascript]\n---\n\n\n## javascript中的this\n\n\n### 先来看个例子  \n\n```javascript\nvar name = \"Bob\";\nvar nameObj ={\n    name : \"Tom\",\n    showName : function(){\n        alert(this.name);\n    },\n    waitShowName : function(){\n        setTimeout(this.showName, 1000); // bob\n        // setTimeout(function(){ //tom\n        //     nameObj.showName()\n        // }, 1000);\n  }\n};\nnameObj.waitShowName();\n```\n\n\n一般而言，在Javascript中，this指向函数**执行时**的当前对象\n\n> The this keyword is relative to the execution context, not the declaration context.\n\n\n\n* 当没有明确的执行时的当前对象时，this指向全局对象window。  \n\n```javascript\n            var obj = {\n                 bar: \"bar\",\n                 foo: function(){\n                     console.log(this);\n                 }\n             };\n             obj.foo(); //obj\n             var bar = obj.foo;\n             bar() //window\n```\n\n\n\n* 在浏览器中setTimeout、setInterval和匿名函数执行时的当前对象通常是是全局对象window，当然也有例外  \n\n```javascript\n\n\n    foo(function (){\n        console.log(this)\n    });\n\n\n\n    el.addEventListener('click', bar, false);\n\n\n\n\n    function foo(fn){   //this绑定为el\n            fn.call({});\n    }\n```\n\n\n\n* eval函数 指向当前执行环境  \n\n```javascript\nvar name = \"window\";\n\nvar Bob = {\n    name: \"Bob\",\n    showName: function(){\n        eval(\"alert(this.name)\");\n    }\n};\n\nBob.showName();    //Bob\n```\n\n\n当然还有很多很多例子，\n涉及 new     还有es5中的 call,apply,bind,  以及es6中的() => {}\n\n```javascript\n\nvar obj = {\n    foo: function() {\n        setTimeout(function(){\n            console.log(this)  //直接绑定this obj\n        }.bind(this))\n    }\n}\n\nobj.foo();\n\n\nvar obj = {\n    foo: function() {\n        setTimeout(() => {\n            console.log(this)  //直接绑定this obj\n        })\n    }\n}\n\nobj.foo();\n\nvar obj = {\n    foo: () => {\n        setTimeout(() => {\n            console.log(this)  //直接绑定this window\n        })\n    }\n}\n\nobj.foo(); //window\n\n```\n\n\n\n\nlambda表达式：  \n\n> 要计算x的平方加2  \n\n```javascript\n(λx.x*x)(λx.x+2)\n```   \n\n假如用js来写  \n\n\n```javascript\n(function(x){ retrun x + 2; })((function(x){ return x*x })(N))\n\n```  \n\n\nes6可以写成  \n```javascript\n(x => x + 2)((x => x * x)(N))\n```  \n\n不一一列举了。\n","slug":"this","published":1,"updated":"2016-06-03T05:24:39.322Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciozadwrs000kfcl1259k1i8a","content":"<h2 id=\"javascript中的this\"><a href=\"#javascript中的this\" class=\"headerlink\" title=\"javascript中的this\"></a>javascript中的this</h2><h3 id=\"先来看个例子\"><a href=\"#先来看个例子\" class=\"headerlink\" title=\"先来看个例子\"></a>先来看个例子</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"Bob\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> nameObj =&#123;</span><br><span class=\"line\">    name : <span class=\"string\">\"Tom\"</span>,</span><br><span class=\"line\">    showName : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        alert(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    waitShowName : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        setTimeout(<span class=\"keyword\">this</span>.showName, <span class=\"number\">1000</span>); <span class=\"comment\">// bob</span></span><br><span class=\"line\">        <span class=\"comment\">// setTimeout(function()&#123; //tom</span></span><br><span class=\"line\">        <span class=\"comment\">//     nameObj.showName()</span></span><br><span class=\"line\">        <span class=\"comment\">// &#125;, 1000);</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">nameObj.waitShowName();</span><br></pre></td></tr></table></figure>\n<p>一般而言，在Javascript中，this指向函数<strong>执行时</strong>的当前对象</p>\n<blockquote>\n<p>The this keyword is relative to the execution context, not the declaration context.</p>\n</blockquote>\n<ul>\n<li>当没有明确的执行时的当前对象时，this指向全局对象window。  </li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">     bar: <span class=\"string\">\"bar\"</span>,</span><br><span class=\"line\">     foo: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">         <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"> obj.foo(); <span class=\"comment\">//obj</span></span><br><span class=\"line\"> <span class=\"keyword\">var</span> bar = obj.foo;</span><br><span class=\"line\"> bar() <span class=\"comment\">//window</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>在浏览器中setTimeout、setInterval和匿名函数执行时的当前对象通常是是全局对象window，当然也有例外  </li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">foo(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">el.addEventListener(<span class=\"string\">'click'</span>, bar, <span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">fn</span>)</span>&#123;   <span class=\"comment\">//this绑定为el</span></span><br><span class=\"line\">        fn.call(&#123;&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>eval函数 指向当前执行环境  </li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"window\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> Bob = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">\"Bob\"</span>,</span><br><span class=\"line\">    showName: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">eval</span>(<span class=\"string\">\"alert(this.name)\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Bob.showName();    <span class=\"comment\">//Bob</span></span><br></pre></td></tr></table></figure>\n<p>当然还有很多很多例子，<br>涉及 new     还有es5中的 call,apply,bind,  以及es6中的() =&gt; {}</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    foo: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>)  <span class=\"comment\">//直接绑定this obj</span></span><br><span class=\"line\">        &#125;.bind(<span class=\"keyword\">this</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">obj.foo();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    foo: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        setTimeout(() =&gt; &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>)  <span class=\"comment\">//直接绑定this obj</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">obj.foo();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    foo: () =&gt; &#123;</span><br><span class=\"line\">        setTimeout(() =&gt; &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>)  <span class=\"comment\">//直接绑定this window</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">obj.foo(); <span class=\"comment\">//window</span></span><br></pre></td></tr></table></figure>\n<p>lambda表达式：  </p>\n<blockquote>\n<p>要计算x的平方加2  </p>\n</blockquote>\n<pre><code class=\"javascript\">(λx.x*x)(λx.x+<span class=\"number\">2</span>)\n</code></pre>\n<p>假如用js来写  </p>\n<pre><code class=\"javascript\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>{ retrun x + <span class=\"number\">2</span>; })((<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>{ <span class=\"keyword\">return</span> x*x })(N))\n</code></pre>\n<p>es6可以写成  </p>\n<pre><code class=\"javascript\">(x =&gt; x + <span class=\"number\">2</span>)((x =&gt; x * x)(N))\n</code></pre>\n<p>不一一列举了。</p>\n","excerpt":"","more":"<h2 id=\"javascript中的this\"><a href=\"#javascript中的this\" class=\"headerlink\" title=\"javascript中的this\"></a>javascript中的this</h2><h3 id=\"先来看个例子\"><a href=\"#先来看个例子\" class=\"headerlink\" title=\"先来看个例子\"></a>先来看个例子</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"Bob\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> nameObj =&#123;</span><br><span class=\"line\">    name : <span class=\"string\">\"Tom\"</span>,</span><br><span class=\"line\">    showName : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        alert(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    waitShowName : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        setTimeout(<span class=\"keyword\">this</span>.showName, <span class=\"number\">1000</span>); <span class=\"comment\">// bob</span></span><br><span class=\"line\">        <span class=\"comment\">// setTimeout(function()&#123; //tom</span></span><br><span class=\"line\">        <span class=\"comment\">//     nameObj.showName()</span></span><br><span class=\"line\">        <span class=\"comment\">// &#125;, 1000);</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">nameObj.waitShowName();</span><br></pre></td></tr></table></figure>\n<p>一般而言，在Javascript中，this指向函数<strong>执行时</strong>的当前对象</p>\n<blockquote>\n<p>The this keyword is relative to the execution context, not the declaration context.</p>\n</blockquote>\n<ul>\n<li>当没有明确的执行时的当前对象时，this指向全局对象window。  </li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">     bar: <span class=\"string\">\"bar\"</span>,</span><br><span class=\"line\">     foo: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">         <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"> obj.foo(); <span class=\"comment\">//obj</span></span><br><span class=\"line\"> <span class=\"keyword\">var</span> bar = obj.foo;</span><br><span class=\"line\"> bar() <span class=\"comment\">//window</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>在浏览器中setTimeout、setInterval和匿名函数执行时的当前对象通常是是全局对象window，当然也有例外  </li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">foo(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">el.addEventListener(<span class=\"string\">'click'</span>, bar, <span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">fn</span>)</span>&#123;   <span class=\"comment\">//this绑定为el</span></span><br><span class=\"line\">        fn.call(&#123;&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>eval函数 指向当前执行环境  </li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"window\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> Bob = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">\"Bob\"</span>,</span><br><span class=\"line\">    showName: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">eval</span>(<span class=\"string\">\"alert(this.name)\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Bob.showName();    <span class=\"comment\">//Bob</span></span><br></pre></td></tr></table></figure>\n<p>当然还有很多很多例子，<br>涉及 new     还有es5中的 call,apply,bind,  以及es6中的() =&gt; {}</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    foo: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>)  <span class=\"comment\">//直接绑定this obj</span></span><br><span class=\"line\">        &#125;.bind(<span class=\"keyword\">this</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">obj.foo();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    foo: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        setTimeout(() =&gt; &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>)  <span class=\"comment\">//直接绑定this obj</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">obj.foo();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    foo: () =&gt; &#123;</span><br><span class=\"line\">        setTimeout(() =&gt; &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>)  <span class=\"comment\">//直接绑定this window</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">obj.foo(); <span class=\"comment\">//window</span></span><br></pre></td></tr></table></figure>\n<p>lambda表达式：  </p>\n<blockquote>\n<p>要计算x的平方加2  </p>\n</blockquote>\n<pre><code class=\"javascript\">(λx.x*x)(λx.x+<span class=\"number\">2</span>)\n</code></pre>\n<p>假如用js来写  </p>\n<pre><code class=\"javascript\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>{ retrun x + <span class=\"number\">2</span>; })((<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>{ <span class=\"keyword\">return</span> x*x })(N))\n</code></pre>\n<p>es6可以写成  </p>\n<pre><code class=\"javascript\">(x =&gt; x + <span class=\"number\">2</span>)((x =&gt; x * x)(N))\n</code></pre>\n<p>不一一列举了。</p>\n"},{"title":"垂直格式化的研究","date":"2016-05-13T07:23:10.000Z","_content":"前段时间研究了下，inline元素的格式化，感觉有点复杂，还没完全弄明白，今天看了下block元素的格式化，原本以为很简单的概念，但是我错了，block元素的格式化也不是很简单，所以很多前辈说css难学，现在看来不无道理。很多前端工程师，都轻视css，在重学了css后，理解这一块真的一点也不轻松。\n## 垂直格式化\n* 块级元素```height```为```auto```  \n高度从最高子元素的上外边距到其最低子元素下外边距  \n> 书上写的与这不一致 以上表现为chrome v50.0.2661.94下的表现  \n* 块级元素```height```有固定值时 情况稍微有点复杂  \n 1. 没有上边距，下边距（上边框，下边框无关）  \n高度为最高元素的上外边距到该元素的下外边距  \n 2. 有上边距，上边框（上边框，下边框无关）\n高度为该元素的上外边距到该元素的下外边距\n","source":"_posts/vertical-format.md","raw":"---\ntitle: 垂直格式化的研究\ndate: 2016-05-13 15:23:10\ntags: [css,js]\n---\n前段时间研究了下，inline元素的格式化，感觉有点复杂，还没完全弄明白，今天看了下block元素的格式化，原本以为很简单的概念，但是我错了，block元素的格式化也不是很简单，所以很多前辈说css难学，现在看来不无道理。很多前端工程师，都轻视css，在重学了css后，理解这一块真的一点也不轻松。\n## 垂直格式化\n* 块级元素```height```为```auto```  \n高度从最高子元素的上外边距到其最低子元素下外边距  \n> 书上写的与这不一致 以上表现为chrome v50.0.2661.94下的表现  \n* 块级元素```height```有固定值时 情况稍微有点复杂  \n 1. 没有上边距，下边距（上边框，下边框无关）  \n高度为最高元素的上外边距到该元素的下外边距  \n 2. 有上边距，上边框（上边框，下边框无关）\n高度为该元素的上外边距到该元素的下外边距\n","slug":"vertical-format","published":1,"updated":"2016-05-13T08:48:54.925Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciozadwrv000lfcl1du5ughci","content":"<p>前段时间研究了下，inline元素的格式化，感觉有点复杂，还没完全弄明白，今天看了下block元素的格式化，原本以为很简单的概念，但是我错了，block元素的格式化也不是很简单，所以很多前辈说css难学，现在看来不无道理。很多前端工程师，都轻视css，在重学了css后，理解这一块真的一点也不轻松。</p>\n<h2 id=\"垂直格式化\"><a href=\"#垂直格式化\" class=\"headerlink\" title=\"垂直格式化\"></a>垂直格式化</h2><ul>\n<li>块级元素<code>height</code>为<code>auto</code><br>高度从最高子元素的上外边距到其最低子元素下外边距  <blockquote>\n<p>书上写的与这不一致 以上表现为chrome v50.0.2661.94下的表现  </p>\n</blockquote>\n</li>\n<li>块级元素<code>height</code>有固定值时 情况稍微有点复杂  <ol>\n<li>没有上边距，下边距（上边框，下边框无关）<br>高度为最高元素的上外边距到该元素的下外边距  </li>\n<li>有上边距，上边框（上边框，下边框无关）<br>高度为该元素的上外边距到该元素的下外边距</li>\n</ol>\n</li>\n</ul>\n","excerpt":"","more":"<p>前段时间研究了下，inline元素的格式化，感觉有点复杂，还没完全弄明白，今天看了下block元素的格式化，原本以为很简单的概念，但是我错了，block元素的格式化也不是很简单，所以很多前辈说css难学，现在看来不无道理。很多前端工程师，都轻视css，在重学了css后，理解这一块真的一点也不轻松。</p>\n<h2 id=\"垂直格式化\"><a href=\"#垂直格式化\" class=\"headerlink\" title=\"垂直格式化\"></a>垂直格式化</h2><ul>\n<li>块级元素<code>height</code>为<code>auto</code><br>高度从最高子元素的上外边距到其最低子元素下外边距  <blockquote>\n<p>书上写的与这不一致 以上表现为chrome v50.0.2661.94下的表现  </p>\n</blockquote>\n</li>\n<li>块级元素<code>height</code>有固定值时 情况稍微有点复杂  <ol>\n<li>没有上边距，下边距（上边框，下边框无关）<br>高度为最高元素的上外边距到该元素的下外边距  </li>\n<li>有上边距，上边框（上边框，下边框无关）<br>高度为该元素的上外边距到该元素的下外边距</li>\n</ol>\n</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ciozadwr40007fcl13umspt18","tag_id":"ciozadwqz0004fcl10sea0fq1","_id":"ciozadwrc000afcl12tcyzjo4"},{"post_id":"ciozadwrc000bfcl1rxc3cbaw","tag_id":"ciozadwqz0004fcl10sea0fq1","_id":"ciozadwrk000efcl10n6wfr23"},{"post_id":"ciozadwqo0000fcl110cpnwhc","tag_id":"ciozadwqz0004fcl10sea0fq1","_id":"ciozadwrn000gfcl1qw76fviu"},{"post_id":"ciozadwqo0000fcl110cpnwhc","tag_id":"ciozadwr60008fcl1pacavvs3","_id":"ciozadwrr000jfcl17yrolff4"},{"post_id":"ciozadwrs000kfcl1259k1i8a","tag_id":"ciozadwqz0004fcl10sea0fq1","_id":"ciozadwrx000nfcl1m33sg1hk"},{"post_id":"ciozadwqu0002fcl1za1tx7x2","tag_id":"ciozadwqz0004fcl10sea0fq1","_id":"ciozadwrz000ofcl13se3li92"},{"post_id":"ciozadwqu0002fcl1za1tx7x2","tag_id":"ciozadwr60008fcl1pacavvs3","_id":"ciozadws0000qfcl11mjtesjp"},{"post_id":"ciozadwr10005fcl1q1b7oak4","tag_id":"ciozadwrx000mfcl1oo1hheos","_id":"ciozadws0000rfcl1lyydng0k"},{"post_id":"ciozadwr70009fcl1x9gh2d3y","tag_id":"ciozadwrz000pfcl1dal48uno","_id":"ciozadws2000tfcl15uhpczku"},{"post_id":"ciozadwri000cfcl17nyi28r3","tag_id":"ciozadwrx000mfcl1oo1hheos","_id":"ciozadws5000vfcl161ptve4m"},{"post_id":"ciozadwrl000ffcl1ohgx50r6","tag_id":"ciozadws2000ufcl1vx19fqv0","_id":"ciozadws6000xfcl1vymuw3lq"},{"post_id":"ciozadwro000hfcl121u64nha","tag_id":"ciozadwqz0004fcl10sea0fq1","_id":"ciozadws7000zfcl1jq0gp7de"},{"post_id":"ciozadwro000hfcl121u64nha","tag_id":"ciozadws6000wfcl1dg0tz7vq","_id":"ciozadws70010fcl1aofg66sa"},{"post_id":"ciozadwrv000lfcl1du5ughci","tag_id":"ciozadws2000ufcl1vx19fqv0","_id":"ciozadws90012fcl1em0bx2e8"},{"post_id":"ciozadwrv000lfcl1du5ughci","tag_id":"ciozadws70011fcl19gtne91k","_id":"ciozadws90013fcl1ptl8mn4d"}],"Tag":[{"name":"javascript","_id":"ciozadwqz0004fcl10sea0fq1"},{"name":"es6","_id":"ciozadwr60008fcl1pacavvs3"},{"name":"others","_id":"ciozadwrx000mfcl1oo1hheos"},{"name":"git","_id":"ciozadwrz000pfcl1dal48uno"},{"name":"css","_id":"ciozadws2000ufcl1vx19fqv0"},{"name":"react","_id":"ciozadws6000wfcl1dg0tz7vq"},{"name":"js","_id":"ciozadws70011fcl19gtne91k"}]}}